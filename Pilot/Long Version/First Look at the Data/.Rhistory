deltaU_a== as.vector(scale(deltaU_a)),
InitialU_a = as.vector(scale(InitialU_a)),
U_c = as.vector(scale(U_c)),
sigmaU_LR = as.vector(scale(sigmaU_LR)))
#Plot model
mcmc_areas(
fit4,
pars = c( 'b_U_b', 'b_U_c', 'b_InitialU_a', 'b_deltaEV', 'b_deltaU_a',
'b_U_b:U_c', 'b_InitialU_a:U_c', 'b_deltaU_a:U_c'
),
#regex_pars = "b_",
prob = 0.89,
point_est = "median",
area_method = "equal height"
) +
geom_vline(xintercept = 0, color = "red", alpha = 0.6, lwd = .8, linetype = "dashed")
#Plot model
mcmc_areas(
fit4,
pars = c( 'b_U_b', 'b_U_c', 'b_InitialU_a', 'b_deltaEV',
'b_U_b:U_c', 'b_InitialU_a:U_c'
),
#regex_pars = "b_",
prob = 0.89,
point_est = "median",
area_method = "equal height"
) +
geom_vline(xintercept = 0, color = "red", alpha = 0.6, lwd = .8, linetype = "dashed")
fit <- glm(dec ~ sigmaU_LR  + deltaEV, data = df_pr2,
family = 'binomial')
summary(fit)
plot_allEffects(fit)
fit <- glm(dec ~ sigmaU_LR*U_c  + deltaEV, data = df_pr2,
family = 'binomial')
summary(fit)
plot_allEffects(fit)
summary(fit)
#Plot model
mcmc_areas(
fit4,
pars = c( 'b_U_b', 'b_U_c', 'b_InitialU_a', 'b_deltaEV',
'b_U_b:U_c', 'b_InitialU_a:U_c'
),
#regex_pars = "b_",
prob = 0.89,
point_est = "median",
area_method = "equal height"
) +
geom_vline(xintercept = 0, color = "red", alpha = 0.6, lwd = .8, linetype = "dashed")
# Create dataframe to test the two predictions
df <- df_frame %>%
# Select only some variables to track more easily the changes
dplyr::select(visit_type_relative, NewInfoL, NewInfoR, trial, sigmaU_LR,
nGreen, EV_L, EV_R, EV_B, U_B, U_R, U_L, resp, last_visit) %>%
mutate(pGrayB=(nDots-nGreen)/nDots) %>%
# Select only a subset with only left - right, and when a new dot is
# sampled
filter(NewInfoL | NewInfoR) %>%
filter(visit_type_relative %in% c("left", 'right')) %>%
# --- Independent Variable --- # Decide type of uncertainty and code the
# Information rate of the attended option (rInfo)
mutate(U_b = ifelse(visit_type_relative == "left", U_R, U_L),
U_a = ifelse(visit_type_relative == "left", U_L, U_R),
U_c = pGrayB,
EV_a = ifelse(visit_type_relative == "left", EV_L, EV_R),
EV_b = ifelse(visit_type_relative == "left", EV_R, EV_L),
deltaEV = abs( mean(EV_a) - mean( c(EV_b, EV_B) )) ) %>%
# Create visit number
mutate(visit_number = ifelse(visit_type_relative == "left", 1, 2)) %>%
group_by(trial) %>%
mutate(visit_number = seq_vector(visit_number)) %>%
# Create Variables to test the First Prediction DV: Amount of Information
# Option (Uunatt) Initial Uncertainty Attended Option (Uatt) Absolute
# Difference between the Mean EV Attended and EV Unattended (deltaEV)
group_by(visit_number, trial) %>%
# --- Dependent Variable (First Prediction) --- #
mutate(nInfo = n()) %>%
# --- Independent Variable --- #
mutate(
# deltaEV = abs(mean(EVatt) - EVunatt),
InitialU_a = first(U_a),
FinalU_a = last(U_a),
meanU_a = mean(U_a),
deltaU_a = InitialU_a - FinalU_a
) %>%
# --- Keep one number of each visit time --- #
group_by(trial, visit_number) %>%
filter(row_number() == 1) %>%
# --- Dependent Variable (Second Prediction) --- #
group_by(trial) %>%
# the last visit is the one where an option is selected
mutate(dec = ifelse(row_number() == n(), 1, 0)) %>%
ungroup() %>%
select(-c(visit_type_relative, NewInfoL, NewInfoR, EV_L, EV_R))
fit4 <- brm(dec ~ (U_b + InitialU_a)*U_c + deltaEV, data = df_pr2, refresh = 0,
family = bernoulli)
df_pr2 <- df %>%
filter((resp==1 & last_visit=='left') |
(resp==0 & last_visit=='right') ) %>%
select(dec, U_b, InitialU_a, U_c, deltaEV, sigmaU_LR, deltaU_a) %>%
# Z-score Variables
mutate(U_b = as.vector(scale(U_b)),
deltaEV = as.vector(scale(deltaEV)),
deltaU_a== as.vector(scale(deltaU_a)),
InitialU_a = as.vector(scale(InitialU_a)),
U_c = as.vector(scale(U_c)),
sigmaU_LR = as.vector(scale(sigmaU_LR)))
fit4 <- brm(dec ~ (U_b + InitialU_a)*U_c + deltaEV, data = df_pr2, refresh = 0,
family = bernoulli)
df_pr2
# Create dataframe to test the two predictions
df <- df_frame %>%
# Select only some variables to track more easily the changes
dplyr::select(visit_type_relative, NewInfoL, NewInfoR, trial, sigmaU_LR,
nGreen, EV_L, EV_R, EV_B, U_B, U_R, U_L, resp, last_visit) %>%
mutate(pGrayB=(nDots-nGreen)/nDots) %>%
# Select only a subset with only left - right, and when a new dot is
# sampled
filter(NewInfoL | NewInfoR) %>%
filter(visit_type_relative %in% c("left", 'right')) %>%
# --- Independent Variable --- # Decide type of uncertainty and code the
# Information rate of the attended option (rInfo)
mutate(U_b = ifelse(visit_type_relative == "left", U_R, U_L),
U_a = ifelse(visit_type_relative == "left", U_L, U_R),
U_c = pGrayB,
EV_a = ifelse(visit_type_relative == "left", EV_L, EV_R),
EV_b = ifelse(visit_type_relative == "left", EV_R, EV_L),
deltaEV = abs( mean(EV_a) - mean( c(EV_b, EV_B) )) ) %>%
# Create visit number
mutate(visit_number = ifelse(visit_type_relative == "left", 1, 2)) %>%
group_by(trial) %>%
mutate(visit_number = seq_vector(visit_number)) %>%
# Create Variables to test the First Prediction DV: Amount of Information
# Option (Uunatt) Initial Uncertainty Attended Option (Uatt) Absolute
# Difference between the Mean EV Attended and EV Unattended (deltaEV)
group_by(visit_number, trial) %>%
# --- Dependent Variable (First Prediction) --- #
mutate(nInfo = n()) %>%
# --- Independent Variable --- #
mutate(
# deltaEV = abs(mean(EVatt) - EVunatt),
InitialU_a = first(U_a),
FinalU_a = last(U_a),
meanU_a = mean(U_a),
deltaU_a = InitialU_a - FinalU_a
) %>%
# --- Keep one number of each visit time --- #
group_by(trial, visit_number) %>%
filter(row_number() == 1) %>%
# --- Dependent Variable (Second Prediction) --- #
group_by(trial) %>%
# the last visit is the one where an option is selected
mutate(dec = ifelse(row_number() == n(), 1, 0)) %>%
ungroup() %>%
select(-c(visit_type_relative, NewInfoL, NewInfoR, EV_L, EV_R))
df$deltaEV
unique(df$deltaEV)
# Create dataframe to test the two predictions
df <- df_frame %>%
# Select only some variables to track more easily the changes
dplyr::select(visit_type_relative, NewInfoL, NewInfoR, trial, sigmaU_LR,
nGreen, EV_L, EV_R, EV_B, U_B, U_R, U_L, resp, last_visit) %>%
mutate(pGrayB=(nDots-nGreen)/nDots) %>%
# Select only a subset with only left - right, and when a new dot is
# sampled
filter(NewInfoL | NewInfoR) %>%
filter(visit_type_relative %in% c("left", 'right')) %>%
# --- Independent Variable --- # Decide type of uncertainty and code the
# Information rate of the attended option (rInfo)
mutate(U_b = ifelse(visit_type_relative == "left", U_R, U_L),
U_a = ifelse(visit_type_relative == "left", U_L, U_R),
U_c = pGrayB,
EV_a = ifelse(visit_type_relative == "left", EV_L, EV_R),
EV_b = ifelse(visit_type_relative == "left", EV_R, EV_L) ) %>%
# Create visit number
mutate(visit_number = ifelse(visit_type_relative == "left", 1, 2)) %>%
group_by(trial) %>%
mutate(visit_number = seq_vector(visit_number)) %>%
# Create Variables to test the First Prediction DV: Amount of Information
# Option (Uunatt) Initial Uncertainty Attended Option (Uatt) Absolute
# Difference between the Mean EV Attended and EV Unattended (deltaEV)
group_by(visit_number, trial) %>%
# --- Dependent Variable (First Prediction) --- #
mutate(nInfo = n()) %>%
# --- Independent Variable --- #
mutate(
# deltaEV = abs(mean(EVatt) - EVunatt),
InitialU_a = first(U_a),
FinalU_a = last(U_a),
meanU_a = mean(U_a),
deltaU_a = InitialU_a - FinalU_a,
deltaEV = abs( mean(EV_a) - mean( c(EV_b, EV_B) ))
) %>%
# --- Keep one number of each visit time --- #
group_by(trial, visit_number) %>%
filter(row_number() == 1) %>%
# --- Dependent Variable (Second Prediction) --- #
group_by(trial) %>%
# the last visit is the one where an option is selected
mutate(dec = ifelse(row_number() == n(), 1, 0)) %>%
ungroup() %>%
select(-c(visit_type_relative, NewInfoL, NewInfoR, EV_L, EV_R))
df$deltaEV
df_pr2 <- df %>%
filter((resp==1 & last_visit=='left') |
(resp==0 & last_visit=='right') ) %>%
select(dec, U_b, InitialU_a, U_c, deltaEV, sigmaU_LR, deltaU_a) %>%
# Z-score Variables
mutate(U_b = as.vector(scale(U_b)),
deltaEV = as.vector(scale(deltaEV)),
deltaU_a== as.vector(scale(deltaU_a)),
InitialU_a = as.vector(scale(InitialU_a)),
U_c = as.vector(scale(U_c)),
sigmaU_LR = as.vector(scale(sigmaU_LR)))
fit4 <- brm(dec ~ (U_b + InitialU_a)*U_c + deltaEV, data = df_pr2, refresh = 0,
family = bernoulli)
#Plot model
mcmc_areas(
fit4,
pars = c( 'b_U_b', 'b_U_c', 'b_InitialU_a', 'b_deltaEV',
'b_U_b:U_c', 'b_InitialU_a:U_c'
),
#regex_pars = "b_",
prob = 0.89,
point_est = "median",
area_method = "equal height"
) +
geom_vline(xintercept = 0, color = "red", alpha = 0.6, lwd = .8, linetype = "dashed")
df_pr2 <- df %>%
filter((resp==1 & last_visit=='left') |
(resp==0 & last_visit=='right') ) %>%
select(dec, U_b, InitialU_a, U_c, deltaEV, sigmaU_LR, deltaU_a) %>%
# Z-score Variables
mutate(U_b = as.vector(scale(U_b)),
deltaEV = as.vector(scale(deltaEV)),
deltaU_a = as.vector(scale(deltaU_a)),
InitialU_a = as.vector(scale(InitialU_a)),
U_c = as.vector(scale(U_c)),
sigmaU_LR = as.vector(scale(sigmaU_LR)))
ch_pl <- df_glm %>%
mutate(deltaEV = EV_L - mean(c(EV_R+EV_B)),
resp=ifelse(resp==1, 1, 0)) +
ggplot(aes(deltaEV, resp)) +
geom_smooth(method='glm', method.args=list(family='binomial'),
color='black') +
labs(y='P(Left Chosen)', x=expression(EV[Left]-EV[Right])) +
theme_pubr()
df_glm %>%
mutate(deltaEV = EV_L - mean(c(EV_R+EV_B)),
resp=ifelse(resp==1, 1, 0)) +
ggplot(aes(deltaEV, resp)) +
geom_smooth(method='glm', method.args=list(family='binomial'),
color='black') +
labs(y='P(Left Chosen)', x=expression(EV[Left]-EV[Right])) +
theme_pubr()
df_glm %>%
mutate(deltaEV = EV_L - mean(c(EV_R+EV_B)),
resp=ifelse(resp==1, 1, 0)) %>%
ggplot(aes(deltaEV, resp)) +
geom_smooth(method='glm', method.args=list(family='binomial'),
color='black') +
labs(y='P(Left Chosen)', x=expression(EV[Left]-EV[Right])) +
theme_pubr()
# Choice
ch_pl <- df_glm %>%
mutate(deltaEV = EV_L - mean(c(EV_R+EV_B)),
resp=ifelse(resp==1, 1, 0)) %>%
ggplot(aes(deltaEV, resp)) +
geom_smooth(method='glm', method.args=list(family='binomial'),
color='black') +
labs(y='P(Left Chosen)', x=expression(EV[Left]-mean(EV[Right], EV[Blocked]) )) +
theme_pubr()
ch_pl
# Choice
ch_pl <- df_glm %>%
mutate(deltaEV = EV_L - mean(c(EV_R+EV_B)),
resp=ifelse(resp==1, 1, 0)) %>%
ggplot(aes(deltaEV, resp)) +
geom_smooth(method='glm', method.args=list(family='binomial'),
color='black') +
labs(y='P(Left Chosen)', x=expression(EV[A]-mean(EV[B], EV[C]) )) +
theme_pubr()
# RT
rt_pl <- df_glm %>%
ggplot(aes(rt, fill=resp ), alpha=0.5) +
geom_histogram() +
scale_fill_manual(values = c(colL, colR, colC)) +
theme_pubr() + labs(x='Reaction Time [s]') +
theme(legend.position=c(0.8, 0.9)) +
facet_wrap(~resp)
rt_pl
df_glm %>%
ggplot(aes(rt, fill=resp ), alpha=0.5) +
geom_histogram() +
scale_fill_manual(values = c(colL, colR, colC)) +
theme_pubr() + labs(x='Reaction Time [s]') +
theme(legend.position=c(0.8, 0.9))
# RT
rt_pl <- df_glm %>%
mutate(resp=case_when(resp==1~'left',
resp==0~'right',
resp==2~'bloched')) %>%
ggplot(aes(rt, fill=resp ), alpha=0.5) +
geom_histogram() +
scale_fill_manual(values = c(colL, colR, colC)) +
theme_pubr() + labs(x='Reaction Time [s]') +
theme(legend.position=c(0.8, 0.9)) +
facet_wrap(~resp)
rt_pl
# RT
rt_pl <- df_glm %>%
mutate(resp=case_when(resp==1~'left',
resp==0~'right',
resp==2~'bloched')) %>%
ggplot(aes(rt, fill=resp ), alpha=0.5) +
geom_density() +
scale_fill_manual(values = c(colL, colR, colC)) +
theme_pubr() + labs(x='Reaction Time [s]') +
theme(legend.position=c(0.8, 0.9)) +
facet_wrap(~resp)
rt_pl
# Choice
ch_pl <- df_glm %>%
mutate(deltaEV = EV_L - mean(c(EV_R+EV_B)),
resp=ifelse(resp==1, 1, 0)) %>%
ggplot(aes(deltaEV, resp)) +
geom_smooth(method='glm', method.args=list(family='binomial'),
color='black') +
labs(y='P(A)', x=expression(EV[A]-mean(EV[B], EV[C]) )) +
theme_pubr()
# RT
rt_pl <- df_glm %>%
mutate(resp=case_when(resp==1~'left',
resp==0~'right',
resp==2~'blocked')) %>%
ggplot(aes(rt, fill=resp ), alpha=0.5) +
geom_density() +
scale_fill_manual(values = c(colL, colR, colC)) +
theme_pubr() + labs(x='Reaction Time [s]') +
theme(legend.position='none') +
facet_wrap(~resp)
cowplot::plot_grid(ch_pl, rt_pl,
nrow=1,
labels = 'AUTO')
m <- glm(resp ~ deltaEv + deltaUn + IrateL + IrateR,
data=df_glm %>%
mutate(deltaEV = EV_L - mean(c(EV_R+EV_B)),
deltaU  = U_L - mean(c(U_R+U_B)),
resp=ifelse(resp==1, 1, 0)),
family = 'binomial')
m <- glm(resp ~ deltaEV + deltaU,
data=df_glm %>%
mutate(deltaEV = EV_L - mean(c(EV_R+EV_B)),
deltaU  = U_L - mean(c(U_R+U_B)),
resp=ifelse(resp==1, 1, 0)),
family = 'binomial')
df_m <- as.data.frame( effects::allEffects(m) )
df_m
# Choice
ch_pl1 <- df_m$deltaU %>%
ggplot(aes(deltaU, fit)) +
geom_ribbon(aes(ymin=lower, ymax=upper), alpha=0.3) +
geom_line(size=1) +
labs(y='P(Left Chosen)', x=expression(Delta~U)) +
theme_pubr()
ch_pl1
m2 <- glm(resp ~ deltaE + LeftM_LR,
data=ddf_glm %>%
mutate(deltaEV = EV_L - mean(c(EV_R+EV_B)),
deltaU  = U_L - mean(c(U_R+U_B)),
resp=ifelse(resp==1, 1, 0)),
family = 'binomial')
m2 <- glm(resp ~ deltaE + LeftM_LR,
data=df_glm %>%
mutate(deltaEV = EV_L - mean(c(EV_R+EV_B)),
deltaU  = U_L - mean(c(U_R+U_B)),
resp=ifelse(resp==1, 1, 0)),
family = 'binomial')
m2 <- glm(resp ~ deltaEV + LeftM_LR,
data=df_glm %>%
mutate(deltaEV = EV_L - mean(c(EV_R+EV_B)),
deltaU  = U_L - mean(c(U_R+U_B)),
resp=ifelse(resp==1, 1, 0)),
family = 'binomial')
df_m2 <- as.data.frame( effects::allEffects(m2) )
ch_pl2 <- df_m2$LeftM_LR %>%
ggplot(aes(LeftM_LR, fit)) +
geom_ribbon(aes(ymin=lower, ymax=upper), alpha=0.3) +
geom_line(size=1) +
labs(y='P(Left Chosen)', x='Prop Left Visits') +
scale_x_continuous(limits = 0:1) +
scale_y_continuous(limits = 0:1) +
theme_pubr()
ch_pl2
df_glm %>%
mutate(last_is_left=ifelse(last_visit=='left','Last is Left', 'Last is not Left' ),
deltaEV = EV_L - mean(c(EV_R+EV_B)),
resp=ifelse(resp==1, 1, 0))) %>%
df_glm %>%
mutate(last_is_left=ifelse(last_visit=='left','Last is Left', 'Last is not Left' ),
deltaEV = EV_L - mean(c(EV_R+EV_B)),
resp=ifelse(resp==1, 1, 0)) %>%
ggplot(aes(deltaEV, resp, color=last_is_left, fill=last_is_left)) +
geom_smooth(method='glm', method.args=list(family='binomial'), alpha=0.2) +
scale_color_manual(values = c(colL, colR)) +
scale_fill_manual(values = c(colL, colR)) +
labs(y='P(Left Chosen)', x='Δ EV', color='', fill='') +
theme_pubr() +theme(legend.position = c(0.8, 0.25))
df_glm %>%
mutate(last_is_left=ifelse(last_visit=='left','Last is Left', 'Last is not Left' ),
deltaEV = EV_L - mean(c(EV_R+EV_B)),
resp=ifelse(resp==1, 1, 0)) %>%
ggplot(aes(deltaEV, resp, color=last_is_left, fill=last_is_left)) +
geom_smooth(method='glm', method.args=list(family='binomial'), alpha=0.2) +
scale_color_manual(values = c(colL, colR)) +
scale_fill_manual(values = c(colL, colR)) +
labs(y='P(Left Chosen)', x='Δ EV', color='', fill='') +
theme_pubr() +theme(legend.position = c(0.8, 0.25))
pr <- df_glm %>%
mutate(last_is_left=ifelse(last_visit=='left','Last is Left', 'Last is not Left' ),
deltaEV = EV_L - mean(c(EV_R+EV_B)),
resp=ifelse(resp==1, 1, 0))
table( pr$last_is_left )
df_glm %>%
mutate(last_is_left=ifelse(last_visit=='left','Last is Left', 'Last is not Left' ),
deltaEV = EV_L - mean(c(EV_R+EV_B)),
resp=ifelse(resp==1, 1, 0)) %>%
ggplot(aes(deltaEV, resp, color=last_is_left, fill=last_is_left)) +
geom_smooth(method='glm', method.args=list(family='binomial'), alpha=0.2) +
scale_color_manual(values = c(colR, colL)) +
scale_fill_manual(values = c(colR, colL)) +
labs(y='P(Left Chosen)', x='Δ EV', color='', fill='') +
theme_pubr() +theme(legend.position = c(0.8, 0.25))
## B
# {-}
## B
# {-}
## B
# {-}
# Load libraries
library(dplyr); library(purrr); library(stringr)
library(ggplot2); library(ggpubr); library(jcolors)
library(cowplot)
# Load data
data_short <- readRDS('Data/data_short.rds')$data
questions  <- readRDS('Data/data_short.rds')$question
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE, fig.align='left')
library(knitr)
## Global options
options(max.print="75")
opts_chunk$set(
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE
)
opts_knit$set(width=75)
# Load libraries
library(dplyr); library(purrr); library(stringr)
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE, fig.align='left')
library(knitr)
## Global options
options(max.print="75")
opts_chunk$set(
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE
)
opts_knit$set(width=75)
library(ggplot2); library(ggpubr); library(jcolors)
library(cowplot)
# Load data
data_short <- readRDS('../Data/data_short.rds')$data
questions  <- readRDS('../Data/data_short.rds')$question
# ----- Mental Accounting ----- #
# Remove final questionnaires
data_short_MA <- data_short[, -(48:75)]
# Remove response time
idx_time      <- str_detect( names(data_short_MA),  'time_')
data_short_MA <- data_short_MA[, !idx_time]
other branch store, located 20 minutes away."
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE, fig.align='left')
library(knitr)
## Global options
options(max.print="75")
opts_chunk$set(
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE
)
opts_knit$set(width=75)
# Load libraries
library(dplyr); library(purrr); library(stringr)
library(ggplot2); library(ggpubr); library(jcolors)
library(cowplot)
# Load data
data_long <- readRDS('../Data/data_long.rds')$data
# ----- Mental Accounting ----- #
# Remove final questionnaires
data_long_MA <- data_long[, -(48:75)]
# Remove response time
idx_time      <- str_detect( names(data_long_MA),  'time_')
data_long_MA <- data_long_MA[, !idx_time]
data_long_MA$F1
