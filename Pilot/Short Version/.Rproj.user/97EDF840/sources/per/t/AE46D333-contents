

# ---------- 1. Mr. A vs Mr. B2 Scenario ---------- #
if( TRUE ){
  # Coding legend:
  # response: 0 (Happier/More upset);  
  #           1 (Less Happy/Less upset)
  #           2 (No difference)
  
  # Create dataframe scenario 1
  data_s1 <- data_short_MA %>% 
    select(subject, contains('A', ignore.case = FALSE)) %>% 
    # Recode response
    mutate(`gain-gain VS gain` = case_when(A1=='A'~0, A1=='B'~1, T~2),
           `loss-loss VS loss` = case_when(A2=='A'~0, A2=='B'~1, T~2),
           `gain-loss VS gain` = case_when(A3=='A'~0, A3=='B'~1, T~2),
           `loss-gain VS loss` = case_when(A4=='A'~0, A4=='B'~1, T~2)
    ) %>% 
    select(-contains('A', ignore.case=FALSE)) %>% 
    melt(id.var='subject',
         variable.name='scenario',
         value.name='response')
  
  data_s1 %>% 
    ggplot(aes(response, fill=as.factor(response))) +
    geom_bar(aes(y = (..count..)/sum(..count..))) + 
    mytheme() + theme(legend.position = 'none') +
    scale_fill_jcolors(palette = 'pal6') +
    scale_y_continuous(labels=scales::percent, guide = "prism_offset") +
    scale_x_continuous(guide = "prism_offset") +
    labs(y=NULL, x=NULL) +
    facet_wrap(~scenario)
  
  # ---- Fit Model ---- #
  library(rstan)
  library(tidybayes)
  options(mc.cores = 4)
  rstan_options(auto_write = TRUE)
  
  # ------------- Intercept Model ------------- #
  # Create Stan Data
  X <- model.matrix(~ 1, data_s1)
  
  #Stan Data
  stan_data <- list(
    N        = nrow(data_s1),
    Y        = data_s1$response,
    X_ds     = X,
    X_cA     = X,
    K_ds     = ncol(X),
    K_cA     = ncol(X),
    
    prior_only = 0
  )
  mental_accounting_stan <- rstan::stan_model(file = 'mental_accounting.stan')
  
  # Fit the model
  fitMAS <- rstan::sampling(mental_accounting_stan, 
                            iter = 2000, 
                            cores = 4, 
                            data = stan_data, 
                            save_warmup = FALSE)
  plot(fitMAS)
  
  tb <- table( data_s1$response ) 
  sum(tb[1:2]) / length(data_s1$response)
  tb[1] / sum(tb[1:2])
  
  
  # ------------- ~ scenario ------------- #
  # Create Stan Data
  X <- model.matrix(~ 0 + scenario, data_s1)
  
  #Stan Data
  stan_data <- list(
    N        = nrow(data_s1),
    Y        = data_s1$response,
    X_ds     = X,
    X_cA     = X,
    K_ds     = ncol(X),
    K_cA     = ncol(X),
    
    prior_only = 0
  )
  mental_accounting_stan <- rstan::stan_model(file = 'mental_accounting.stan')
  
  # Fit the model
  fitMAS <- rstan::sampling(mental_accounting_stan, 
                            iter = 2000, 
                            cores = 4, 
                            data = stan_data, 
                            save_warmup = FALSE)
  
  draws <- extract(fitMAS)
  colnames(draws$b_ds) <- words_replace(colnames(X), 'scenario')
  colnames(draws$b_cA) <- words_replace(colnames(X), 'scenario')
  
  rbind(draws$b_ds %>% melt() %>% mutate(type='P[Different vs Same]'),
        draws$b_cA %>% melt() %>% mutate(type='P[A vs B | Different]')) %>% 
    mutate(Var2 = factor(Var2, levels = rev(unique(.$Var2))),
           type = factor(type, levels = rev(unique(.$type)))) %>% 
    ggplot(aes(x = value, y = Var2)) + 
    stat_halfeye(fill = jcolors::jcolors(palette = "pal8")[6],
                 color = jcolors::jcolors(palette = "pal8")[12]) + 
    mytheme() + 
    geom_vline(xintercept = 0, linetype = 2) + 
    labs(y = NULL, x = "Posterior Probability") +
    facet_grid(~type)
  
  
}



# ---------- 2. The sold-out ticket Scenario ---------- #
if( TRUE ){
  # --------- Coding legend: --------- #
  # -- Dependent Variable -- #
  # response: 0
  #           5 
  #           10 
  #           Other
  # -- Explanatory Variables -- #
  # cost: 0, 5, 10 (defined as p in Thaler 1985) 
  #      [cost influence the "fair price" (p_star), which is operationalized
  #       with the price asked to a friend]
  # market_value : 5, 10
  # buyer: friend (proxy for a fair price), stranger
  
  
  # Create dataframe scenario 2
  df <- data_short_MA %>% 
    select(contains('B', ignore.case =  F))
  
  col_names <- names(df)
  cost <- rep(c(0, 5, 10), each=2)
  market_value <- rep(c(5, 10), 3)
  col_idx <- seq(1,ncol(df),2)
  data_s2 <- map_df(seq_along(col_idx), function(i){
    
    data.frame( response = c(df[,col_names[col_idx[i]]], df[,col_names[col_idx[i]+1]]),
                cost = cost[i],
                market_value = market_value[i],
                buyer = c(rep('Friend', n_sbj), rep('Stranger', n_sbj)) )
    
  })
  
  data_s2%>% 
    mutate(response=ifelse(response%in%unique(cost), response, 'Other'),
           response = factor(response, levels = c('0', '5', '10', 'Other'))) %>% 
    group_by(cost, market_value, buyer) %>% 
    count(response, .drop = F) %>% 

    ggplot(aes(response, n, fill=buyer)) +
    geom_bar(stat="identity", position=position_dodge(), color="black") + 
    mytheme() + 
    scale_fill_jcolors(palette = 'pal6') +
    # scale_y_continuous(labels=scales::percent, guide = "prism_offset", breaks = ) +
    # scale_x_discrete(guide = "prism_offset", breaks) +
    # scale_x_continuous(breaks = 1:4) + 
    labs(y=NULL, x=NULL) +
    facet_grid(cost~market_value)
  
  # ---- Fit Model ---- #
  library(rstan)
  library(tidybayes)
  options(mc.cores = 4)
  rstan_options(auto_write = TRUE)
  
  # ------------- Intercept Model ------------- #
  # Create Stan Data
  X <- model.matrix(~ 1, data_s1)
  
  #Stan Data
  stan_data <- list(
    N        = nrow(data_s1),
    Y        = data_s1$response,
    X_ds     = X,
    X_cA     = X,
    K_ds     = ncol(X),
    K_cA     = ncol(X),
    
    prior_only = 0
  )
  mental_accounting_stan <- rstan::stan_model(file = 'mental_accounting.stan')
  
  # Fit the model
  fitMAS <- rstan::sampling(mental_accounting_stan, 
                            iter = 2000, 
                            cores = 4, 
                            data = stan_data, 
                            save_warmup = FALSE)
  plot(fitMAS)
  
  tb <- table( data_s1$response ) 
  sum(tb[1:2]) / length(data_s1$response)
  tb[1] / sum(tb[1:2])
  
  
  # ------------- ~ scenario ------------- #
  # Create Stan Data
  X <- model.matrix(~ 0 + scenario, data_s1)
  
  #Stan Data
  stan_data <- list(
    N        = nrow(data_s1),
    Y        = data_s1$response,
    X_ds     = X,
    X_cA     = X,
    K_ds     = ncol(X),
    K_cA     = ncol(X),
    
    prior_only = 0
  )
  mental_accounting_stan <- rstan::stan_model(file = 'mental_accounting.stan')
  
  # Fit the model
  fitMAS <- rstan::sampling(mental_accounting_stan, 
                            iter = 2000, 
                            cores = 4, 
                            data = stan_data, 
                            save_warmup = FALSE)
  
  draws <- extract(fitMAS)
  colnames(draws$b_ds) <- words_replace(colnames(X), 'scenario')
  colnames(draws$b_cA) <- words_replace(colnames(X), 'scenario')
  
  rbind(draws$b_ds %>% melt() %>% mutate(type='P[Different vs Same]'),
        draws$b_cA %>% melt() %>% mutate(type='P[A vs B | Different]')) %>% 
    mutate(Var2 = factor(Var2, levels = rev(unique(.$Var2))),
           type = factor(type, levels = rev(unique(.$type)))) %>% 
    ggplot(aes(x = value, y = Var2)) + 
    stat_halfeye(fill = jcolors::jcolors(palette = "pal8")[6],
                 color = jcolors::jcolors(palette = "pal8")[12]) + 
    mytheme() + 
    geom_vline(xintercept = 0, linetype = 2) + 
    labs(y = NULL, x = "Posterior Probability") +
    facet_grid(~type)
  
  
}