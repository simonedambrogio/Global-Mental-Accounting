---
title: "Analysis Procedure"
author: "Simone D'Ambrogio"
subtitle: "Short Version"
date: "`r Sys.Date()`"
output:
  html_document:
    fig_caption: true
    toc: true
    toc_depth: 2
    toc_float: true
    theme: united
    highlight: tango
    code_folding: hide
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE, fig.align='left')
library(knitr)
## Global options
options(max.print="75")
opts_chunk$set(
	             cache=TRUE,
               prompt=FALSE,
               tidy=TRUE,
               comment=NA,
               message=FALSE,
               warning=FALSE
               )
opts_knit$set(width=75)
```

<style type="text/css">
  body {
    text-align: justify;
    font-size: 16px;
  }
  img[src$="centerme"] {
    display:block;
    margin: 0 auto;
  }
</style>

<br><br>

```{r mytheme}
mytheme <- function (palette = "black_and_white", base_size = 14, base_family = "sans", 
                     base_fontface = "plain", base_line_size = base_size/20, base_rect_size = base_size/14, 
                     axis_text_angle = 0, border = FALSE) {
  
  is_bool <- function(x) {
    is_logical(x, n = 1) && !is.na(x)
  } 
  angle <- axis_text_angle[1]
   if (!angle %in% c(0, 45, 90, 270)) 
     stop(sprintf("'axis_text_angle' must be one of [%s]", 
                  paste(c(0, 45, 90, 270), collapse = ", ")), ".\nFor other angles, use the guide_axis() function in ggplot2 instead", 
          call. = FALSE)
   if (!palette %in% names(ggprism::ggprism_data$themes)) {
     stop("The palette ", paste(palette), " does not exist.\n         See names(ggprism_data$themes) for valid palette names")
   }
   colours <- tibble::deframe(ggprism::ggprism_data$themes[[palette]])
   if (!is_bool(border)) {
     stop("border must be either: TRUE or FALSE")
   }
   else {
     if (border) {
       panel.border <- element_rect(fill = NA)
       axis.line <- element_blank()
     }
     else if (!border) {
       panel.border <- element_blank()
       axis.line <- element_line()
     }
   }
   t <- theme(line = element_line(colour = colours["axisColor"], 
                                  size = base_line_size, linetype = 1, lineend = "square"), 
              rect = element_rect(fill = "white", colour = colours["axisColor"], 
                                  size = base_rect_size, linetype = 1), text = element_text(family = base_family, 
                                                                                            face = base_fontface, colour = colours["graphTitleColor"], 
                                                                                            size = base_size, lineheight = 0.9, hjust = 0.5, 
                                                                                            vjust = 0.5, angle = 0, margin = margin(), debug = FALSE), 
              prism.ticks.length = unit(base_size/50, "pt"), axis.line = axis.line, 
              axis.line.x = NULL, axis.line.y = NULL, axis.text = element_text(size = rel(0.95), 
                                                                               colour = colours["axisLabelColor"]), axis.text.x = element_text(margin = margin(t = 0.8 * 
                                                                                                                                                                 base_size/4), angle = axis_text_angle, hjust = ifelse(axis_text_angle %in% 
                                                                                                                                                                                                                         c(45, 90, 270), 1, 0.5), vjust = ifelse(axis_text_angle %in% 
                                                                                                                                                                                                                                                                   c(0, 90, 270), 0.5, 1)), axis.text.x.top = element_text(margin = margin(b = 0.8 * 
                                                                                                                                                                                                                                                                                                                                             base_size/4), vjust = 0), axis.text.y = element_text(margin = margin(r = 0.5 * 
                                                                                                                                                                                                                                                                                                                                                                                                                    base_size/4), hjust = 1), axis.text.y.right = element_text(margin = margin(l = 0.5 * 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 base_size/4), hjust = 0), axis.ticks = element_line(), 
              axis.ticks.length = unit(3, "points"), axis.ticks.length.x = NULL, 
              axis.ticks.length.x.top = NULL, axis.ticks.length.x.bottom = NULL, 
              axis.ticks.length.y = NULL, axis.ticks.length.y.left = NULL, 
              axis.ticks.length.y.right = NULL, axis.title = element_text(colour = colours["axisTitleColor"]), 
              axis.title.x = element_text(margin = margin(t = base_size * 
                                                            0.6), vjust = 1), axis.title.x.top = element_text(margin = margin(b = base_size * 
                                                                                                                                0.6), vjust = 0), axis.title.y = element_text(angle = 90, 
                                                                                                                                                                              margin = margin(r = base_size * 0.6), vjust = 1), 
              axis.title.y.right = element_text(angle = -90, margin = margin(l = base_size * 
                                                                               0.6), vjust = 0), legend.background = element_blank(), 
              legend.spacing = unit(base_size, "pt"), legend.spacing.x = NULL, 
              legend.spacing.y = NULL, legend.margin = margin(base_size/2, 
                                                              base_size/2, base_size/2, base_size/2), legend.key = element_blank(), 
              legend.key.size = unit(1.2, "lines"), legend.key.height = NULL, 
              legend.key.width = unit(base_size * 1.8, "pt"), legend.text = element_text(size = rel(0.8), 
                                                                                         face = "plain"), legend.text.align = NULL, legend.title = element_blank(), 
              legend.title.align = NULL, legend.position = "right", 
              legend.direction = NULL, legend.justification = "center", 
              legend.box = NULL, legend.box.margin = margin(0, 0, 0, 
                                                            0, "cm"), legend.box.background = element_blank(), 
              legend.box.spacing = unit(base_size, "pt"), panel.background = element_rect(fill = ifelse(palette == 
                                                                                                          "office", colours["plottingAreaColor"], NA), colour = NA), 
              panel.border = panel.border, panel.grid = element_blank(), 
              panel.grid.minor = element_blank(), panel.spacing = unit(base_size/2, 
                                                                       "pt"), panel.spacing.x = NULL, panel.spacing.y = NULL, 
              panel.ontop = FALSE, strip.background = element_blank(), 
              strip.text = element_text(colour = colours["axisTitleColor"], 
                                        size = rel(0.8), margin = margin(base_size/2.5, base_size/2.5, 
                                                                         base_size/2.5, base_size/2.5)), strip.text.x = element_text(margin = margin(b = base_size/3)), 
              strip.text.y = element_text(angle = -90, margin = margin(l = base_size/3)), 
              strip.text.y.left = element_text(angle = 90), strip.placement = "inside", 
              strip.placement.x = NULL, strip.placement.y = NULL, strip.switch.pad.grid = unit(base_size/4, 
                                                                                               "pt"), strip.switch.pad.wrap = unit(base_size/4, 
                                                                                                                                   "pt"), plot.background = element_rect(fill = colours["pageBackgroundColor"], 
                                                                                                                                                                         colour = NA), plot.title = element_text(size = rel(1.2), 
                                                                                                                                                                                                                 hjust = 0.5, vjust = 1, margin = margin(b = base_size)), 
              plot.title.position = "panel", plot.subtitle = element_text(hjust = 0.5, 
                                                                          vjust = 1, margin = margin(b = base_size/2)), plot.caption = element_text(size = rel(0.8), 
                                                                                                                                                    hjust = 1, vjust = 1, margin = margin(t = base_size/2)), 
              plot.caption.position = "panel", plot.tag = element_text(size = rel(1.2), 
                                                                       hjust = 0.5, vjust = 0.5), plot.tag.position = "topleft", 
              plot.margin = margin(base_size/2, base_size/2, base_size/2, 
                                   base_size/2), complete = TRUE)
   ggprism::ggprism_data$themes[["all_null"]] %+replace% t
 }
```


```{r load-data&library, results='hide'}

# Load libraries
library(dplyr); library(purrr); library(stringr)
library(ggplot2); library(ggpubr); library(jcolors)
library(cowplot); library(ggprism)
library(reshape2)

# Functions
words_replace <- function(variable, words_to_replace, replace_with = "") {

    library(dplyr)
    if (!require(dplyr)) {
        install.packages("dplyr")
        library(dplyr)
    }

    # variable <- enquo(variable) var <- select(data, !!variable) %>% .[,]

    if (!is.character(variable))
        variable <- as.character(variable)

    for (word_i in 1:length(words_to_replace)) {
        word_to_rm_index <- which(str_detect(variable, fixed(words_to_replace[word_i])))

        if (any(word_to_rm_index)) {
            words_to_replace_i <- words_to_replace[word_i]
            new_words <- sapply(seq_along(word_to_rm_index), function(i) {
                variable[word_to_rm_index][i] <- gsub(words_to_replace_i, replace_with,
                  variable[word_to_rm_index][i], fixed = TRUE)
            })
            variable[word_to_rm_index] <- new_words
        } else {
            warning(paste0("Sting '", words_to_replace, "' not found"))
        }
    }

    return(variable)
}

# Load data
data_short <- readRDS('../Data/data_short.rds')$data %>% 
  mutate(subject=1:n()) %>% 
  rename(age=`Age.`, A3=`A3.`)

questions  <- readRDS('../Data/data_short.rds')$question

# ----- Mental Accounting ----- #
# Remove final questionnaires
data_short_MA <- data_short[, -(48:75)]
# Remove response time
idx_time      <- str_detect( names(data_short_MA),  'time_')
data_short_MA <- data_short_MA[, !idx_time] 

data_short_MA <- data_short_MA %>% 
  rename_with(~gsub('.', '', .x, fixed = TRUE)) %>% 
  rename_with(toupper, .cols = -contains('subject'))

n_sbj <- nrow( data_short_MA )
```

<br><br>

## Mr. A vs Mr. B2

<br>

### {.tabset}

#### Data

```{r plot-empirical-data-S1, message=F, warning=F, fig.width=6, fig.height=5, fig.align='center'}

# ---------- Mr. A vs Mr. B2 Scenario ---------- #

# Coding legend:
# response: 0 (Happier/More upset);  
#           1 (Less Happy/Less upset)
#           2 (No difference)

# Create dataframe scenario 1
data_s1 <- data_short %>% 
  select(subject, contains('A', ignore.case = FALSE)) %>% 
  # Recode response
  mutate(`gain-gain VS gain` = case_when(A1=='A'~0, A1=='B'~1, T~2),
         `loss-loss VS loss` = case_when(A2=='A'~0, A2=='B'~1, T~2),
         `gain-loss VS gain` = case_when(A3=='A'~0, A3=='B'~1, T~2),
         `loss-gain VS loss` = case_when(A4=='A'~0, A4=='B'~1, T~2)
         ) %>% 
  select(-contains('A', ignore.case=FALSE)) %>% 
  melt(id.var='subject',
       variable.name='scenario',
       value.name='response')

data_s1 %>% 
  ggplot(aes(response, fill=as.factor(response))) +
  geom_bar(aes(y = (..count..)/sum(..count..))) + 
  mytheme() + theme(legend.position = 'none', 
                    axis.title.y=element_blank(),
                    axis.text.y=element_blank()) +
  scale_fill_jcolors(palette = 'pal6') +
  scale_y_continuous(labels=scales::percent, guide = "prism_offset") +
  scale_x_continuous(guide = "prism_offset", breaks = 0:2, labels = c('A', 'B', 'Same')) +
  labs(y=NULL, x=NULL) +
  facet_wrap(~scenario)
```

#### Stan Code

```{r code_1, eval = TRUE, echo = FALSE}
cat(get_stancode(stan_fit_1), file = "code1.stan")
```

```{stan stan-code-S1, output.var='fitMAS', code=readLines('mental_accounting.stan')}

```

#### Fit

**Model Fit**

```{r fit-stan-model-S1, message=F, warning=F, fig.width=6, fig.height=5, fig.align='center'}

# ---- Fit Model ---- #
library(rstan)
library(tidybayes)
options(mc.cores = 4)
rstan_options(auto_write = TRUE)

# ------------- ~ scenario ------------- #
# Create Stan Data
X <- model.matrix(~ 0 + scenario, data_s1)

#Stan Data
stan_data <- list(
  N        = nrow(data_s1),
  Y        = data_s1$response,
  X_ds     = X,
  X_cA     = X,
  K_ds     = ncol(X),
  K_cA     = ncol(X),
  
  prior_only = 0
)
mental_accounting_stan <- rstan::stan_model(file = 'mental_accounting.stan')

# Fit the model
fitMAS <- rstan::sampling(mental_accounting_stan, 
                          iter = 2000, 
                          cores = 4, 
                          data = stan_data, 
                          save_warmup = FALSE)


```

**Plot Model Posteriors**

```{r plot-posteriors-stan-model-S1, message=F, warning=F, fig.width=9, fig.height=5, fig.align='center'}
draws <- extract(fitMAS)
colnames(draws$b_ds) <- words_replace(colnames(X), 'scenario')
colnames(draws$b_cA) <- words_replace(colnames(X), 'scenario')

rbind(draws$b_ds %>% melt() %>% mutate(type='P[Different vs Same]'),
      draws$b_cA %>% melt() %>% mutate(type='P[A vs B | Different]')) %>% 
  mutate(Var2 = factor(Var2, levels = rev(unique(.$Var2))),
         type = factor(type, levels = rev(unique(.$type)))) %>% 
  ggplot(aes(x = value, y = Var2)) + 
  stat_halfeye(fill = jcolors::jcolors(palette = "pal8")[6],
               color = jcolors::jcolors(palette = "pal8")[12]) + 
  mytheme() + 
  geom_vline(xintercept = 0, linetype = 2) + 
  labs(y = NULL, x = "Posterior Probability") +
  facet_grid(~type)

```

### {-}

<br><br>

## The sold-out ticket

<br>

### {.tabset}

#### Data

```{r plot-empirical-data-S2, message=F, warning=F, fig.width=8, fig.height=6, fig.align='center'}
# --------- Coding legend: --------- #
# -- Dependent Variable -- #
# response: 0
#           5 
#           10 
#           Other
# -- Explanatory Variables -- #
# cost: 0, 5, 10 (defined as p in Thaler 1985) 
#      [cost influence the "fair price" (p_star), which is operationalized
#       with the price asked to a friend]
# market_value : 5, 10
# buyer: friend (proxy for a fair price), stranger


# Create dataframe scenario 2
df <- data_short_MA %>% 
select(contains('B', ignore.case =  F))

col_names <- names(df)
cost <- rep(c(0, 5, 10), each=2)
market_value <- rep(c(5, 10), 3)
col_idx <- seq(1,ncol(df),2)
data_s2 <- map_df(seq_along(col_idx), function(i){

data.frame( response = c(df[,col_names[col_idx[i]]], df[,col_names[col_idx[i]+1]]),
            cost = cost[i],
            market_value = market_value[i],
            buyer = c(rep('Friend', n_sbj), rep('Stranger', n_sbj)) )

})

data_s2%>% 
  mutate(response=ifelse(response%in%unique(cost), response, 'Other'),
         response = factor(response, levels = c('0', '5', '10', 'Other'))) %>% 
  group_by(cost, market_value, buyer) %>% 
  count(response, .drop = F) %>% 
  ggplot(aes(response, n, fill=buyer)) +
  geom_bar(stat="identity", position=position_dodge(), color="black") + 
  mytheme() + 
  scale_fill_jcolors(palette = 'pal6') +
  labs(y=NULL, x=NULL) +
  facet_grid(cost~market_value)
```

#### Stan Code
```{stan stan-code-S2, output.var='fitMA_S2'}

```

#### Fit

**Model Fit**

```{r fit-stan-model-S2, message=F, warning=F, fig.width=6, fig.height=5, fig.align='center'}

# Create Stan Data

#Stan Data

# Fit the model

```

**Plot Model Posteriors**

```{r plot-posteriors-stan-model-S2, message=F, warning=F, fig.width=9, fig.height=5, fig.align='center'}

```

### {-}

<br><br>
