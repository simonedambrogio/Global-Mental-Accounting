# Load data
data_short <- readRDS('../Pilot/Short Version/Data/data_short.rds')$data %>%
mutate(subject=1:n()) %>%
rename(age=`Age.`, A3=`A3.`)
questions  <- readRDS('../Pilot/Short Version/Data/data_short.rds')$question
# ----- Mental Accounting ----- #
# Remove final questionnaires
data_short_MA <- data_short[, -(48:75)]
# Remove response time
idx_time      <- str_detect( names(data_short_MA),  'time_')
data_short_MA <- data_short_MA[, !idx_time]
data_short_MA <- data_short_MA %>%
rename_with(~gsub('.', '', .x, fixed = TRUE)) %>%
rename_with(toupper, .cols = -contains('subject'))
n_sbj <- nrow( data_short_MA )
data_s1 <- data_short %>%
select(subject, contains('A', ignore.case = FALSE)) %>%
# Recode response
mutate(`gain-gain VS gain` = case_when(A1=='A'~0, A1=='B'~1, T~2),
`loss-loss VS loss` = case_when(A2=='A'~0, A2=='B'~1, T~2),
`gain-loss VS gain` = case_when(A3=='A'~0, A3=='B'~1, T~2),
`loss-gain VS loss` = case_when(A4=='A'~0, A4=='B'~1, T~2)
) %>%
select(-contains('A', ignore.case=FALSE)) %>%
melt(id.var='subject',
variable.name='scenario',
value.name='response')
data_s1 %>%
ggplot(aes(response)) +
geom_bar(aes(y = (..count..)/sum(..count..)),
fill=jcolors::jcolors(palette = 'pal6')[1]) +
mytheme() + theme(legend.position = 'none',
axis.title.y=element_blank(),
axis.text.y=element_blank()) +
scale_fill_brewer(palette = 'Set1') +
scale_y_continuous(labels=scales::percent, guide = "prism_offset") +
scale_x_continuous(guide = "prism_offset", breaks = 0:2, labels = c('A', 'B', 'Same')) +
labs(y=NULL, x=NULL) +
facet_wrap(~scenario)
data_s1
model.matrix(~ 0 + scenario, data_s1)
model.matrix(~ 0 + scenario*scenario_group, data_s1)
data_s1
# ---------- Mr. A vs Mr. B2 Scenario ---------- #
# Coding legend:
# response: 0 (Happier/More upset);
#           1 (Less Happy/Less upset)
#           2 (No difference)
# Create dataframe scenario 1
data_s1 <- data_short %>%
select(subject, contains('A', ignore.case = FALSE)) %>%
# Recode response
mutate(`gain-gain VS gain` = case_when(A1=='A'~0, A1=='B'~1, T~2),
`loss-loss VS loss` = case_when(A2=='A'~0, A2=='B'~1, T~2),
`gain-loss VS gain` = case_when(A3=='A'~0, A3=='B'~1, T~2),
`loss-gain VS loss` = case_when(A4=='A'~0, A4=='B'~1, T~2) ) %>%
select(-contains('A', ignore.case=FALSE)) %>%
melt(id.var='subject',
variable.name='scenario',
value.name='response') %>%
mutate(scenario_group = ifelse(
scenario=='gain-gain VS gain' | scenario=='gain-loss VS gain', 'gain', 'loss'
))
data_s1 %>%
ggplot(aes(response)) +
geom_bar(aes(y = (..count..)/sum(..count..)),
fill=jcolors::jcolors(palette = 'pal6')[1]) +
mytheme() + theme(legend.position = 'none',
axis.title.y=element_blank(),
axis.text.y=element_blank()) +
scale_fill_brewer(palette = 'Set1') +
scale_y_continuous(labels=scales::percent, guide = "prism_offset") +
scale_x_continuous(guide = "prism_offset", breaks = 0:2, labels = c('A', 'B', 'Same')) +
labs(y=NULL, x=NULL) +
facet_wrap(~scenario)
data_s1
model.matrix(~ 0 + scenario*scenario_group, data_s1)
model.matrix(~ 0 + scenario*scenario_group, data_s1)[1,]
lazyLoad('Report_cache/html/fit-stan-model-S1_d93fcb866abe11b4e7d30471898c38d2')
draws <- extract(fit_S1)
colnames(draws$b_ds) <- words_replace(colnames(X), 'scenario')
colnames(draws$b_cA) <- words_replace(colnames(X), 'scenario')
View(draws)
draws$b_cA
str( draws$b_cA )
as.data.frame( draws$b_cA )
df_post <- as.data.frame( draws$b_cA )
df <- as.data.frame( draws$b_cA )
with( df, `gain-gain VS gain` - `gain-loss VS gain` )
hist( with( df, `gain-gain VS gain` - `gain-loss VS gain` ) )
hist( with( df, `loss-loss VS loss` - `loss-gain VS loss` ) )
data.frame( post = with( df, `gain-gain VS gain` - `gain-loss VS gain` ),
effect = '(gain-gain VS gain)\nX\n(gain-loss VS gain)')
rbind(
data.frame( post = with( df, `gain-gain VS gain` - `gain-loss VS gain` ),
effect = '(gain-gain VS gain)\nX\n(gain-loss VS gain)'),
data.frame( post = with( df, `loss-loss VS loss` - `loss-gain VS loss` ),
effect = '(loss-loss VS loss)\nX\n(loss-gain VS loss)')
)
rbind(
data.frame( post = with( df, `gain-gain VS gain` - `gain-loss VS gain` ),
effect = '(gain-gain VS gain)\nX\n(gain-loss VS gain)'),
data.frame( post = with( df, `loss-loss VS loss` - `loss-gain VS loss` ),
effect = '(loss-loss VS loss)\nX\n(loss-gain VS loss)')
) %>%
ggplot(aes(x = post, y = effect)) +
stat_halfeye(fill = jcolors::jcolors(palette = "pal8")[6],
color = jcolors::jcolors(palette = "pal8")[12]) +
mytheme() +
geom_vline(xintercept = 0, linetype = 2) +
labs(y = NULL, x = "Posterior Probability")
rbind(
data.frame( post = with( df, `gain-gain VS gain` - `gain-loss VS gain` ),
effect = 'gain-gain VS gain\nX\ngain-loss VS gain'),
data.frame( post = with( df, `loss-loss VS loss` - `loss-gain VS loss` ),
effect = 'loss-loss VS loss\nX\nloss-gain VS loss')
) %>%
ggplot(aes(x = post, y = effect)) +
stat_halfeye(fill = jcolors::jcolors(palette = "pal8")[6],
color = jcolors::jcolors(palette = "pal8")[12]) +
mytheme() + theme(axis.text.y = NULL)
rbind(
data.frame( post = with( df, `gain-gain VS gain` - `gain-loss VS gain` ),
effect = 'gain-gain VS gain\nX\ngain-loss VS gain'),
data.frame( post = with( df, `loss-loss VS loss` - `loss-gain VS loss` ),
effect = 'loss-loss VS loss\nX\nloss-gain VS loss')
) %>%
ggplot(aes(x = post, y = effect)) +
stat_halfeye(fill = jcolors::jcolors(palette = "pal8")[6],
color = jcolors::jcolors(palette = "pal8")[12]) +
mytheme() + theme(axis.text.y = NULL)
geom_vline(xintercept = 0, linetype = 2) +
labs(y = NULL, x = "Posterior Probability")
rbind(
data.frame( post = with( df, `gain-gain VS gain` - `gain-loss VS gain` ),
effect = 'gain-gain VS gain\nX\ngain-loss VS gain'),
data.frame( post = with( df, `loss-loss VS loss` - `loss-gain VS loss` ),
effect = 'loss-loss VS loss\nX\nloss-gain VS loss')
) %>%
ggplot(aes(x = post, y = effect)) +
stat_halfeye(fill = jcolors::jcolors(palette = "pal8")[6],
color = jcolors::jcolors(palette = "pal8")[12]) +
mytheme() + theme(axis.text.y = NULL) +
geom_vline(xintercept = 0, linetype = 2) +
labs(y = NULL, x = "Posterior Probability")
rbind(
data.frame( post = with( df, `gain-gain VS gain` - `gain-loss VS gain` ),
effect = 'gain-gain VS gain\nX\ngain-loss VS gain'),
data.frame( post = with( df, `loss-loss VS loss` - `loss-gain VS loss` ),
effect = 'loss-loss VS loss\nX\nloss-gain VS loss')
) %>%
ggplot(aes(x = post, y = effect)) +
stat_halfeye(fill = jcolors::jcolors(palette = "pal8")[6],
color = jcolors::jcolors(palette = "pal8")[12]) +
mytheme() +
geom_vline(xintercept = 0, linetype = 2) +
labs(y = NULL, x = "Posterior Probability")
rbind(
data.frame( post = with( df, `gain-gain VS gain` - `gain-loss VS gain` ),
effect = 'gain-gain VS gain\nX\ngain-loss VS gain'),
data.frame( post = with( df, `loss-loss VS loss` - `loss-gain VS loss` ),
effect = 'loss-loss VS loss\nX\nloss-gain VS loss')
) %>%
ggplot(aes(x = post, y = effect)) +
stat_halfeye(fill = jcolors::jcolors(palette = "pal8")[6],
color = jcolors::jcolors(palette = "pal8")[12]) +
mytheme() + theme(axis.text.y = NULL) +
geom_vline(xintercept = 0, linetype = 2) +
labs(y = NULL, x = "Posterior Probability")
mytheme <- function (palette = "black_and_white", base_size = 14, base_family = "sans",
base_fontface = "plain", base_line_size = base_size/20, base_rect_size = base_size/14,
axis_text_angle = 0, border = FALSE) {
is_bool <- function(x) {
is_logical(x, n = 1) && !is.na(x)
}
angle <- axis_text_angle[1]
if (!angle %in% c(0, 45, 90, 270))
stop(sprintf("'axis_text_angle' must be one of [%s]",
paste(c(0, 45, 90, 270), collapse = ", ")), ".\nFor other angles, use the guide_axis() function in ggplot2 instead",
call. = FALSE)
if (!palette %in% names(ggprism::ggprism_data$themes)) {
stop("The palette ", paste(palette), " does not exist.\n         See names(ggprism_data$themes) for valid palette names")
}
colours <- tibble::deframe(ggprism::ggprism_data$themes[[palette]])
if (!is_bool(border)) {
stop("border must be either: TRUE or FALSE")
}
else {
if (border) {
panel.border <- element_rect(fill = NA)
axis.line <- element_blank()
}
else if (!border) {
panel.border <- element_blank()
axis.line <- element_line()
}
}
t <- theme(line = element_line(colour = colours["axisColor"],
size = base_line_size, linetype = 1, lineend = "square"),
rect = element_rect(fill = "white", colour = colours["axisColor"],
size = base_rect_size, linetype = 1), text = element_text(family = base_family,
face = base_fontface, colour = colours["graphTitleColor"],
size = base_size, lineheight = 0.9, hjust = 0.5,
vjust = 0.5, angle = 0, margin = margin(), debug = FALSE),
prism.ticks.length = unit(base_size/50, "pt"), axis.line = axis.line,
axis.line.x = NULL, axis.line.y = NULL, axis.text = element_text(size = rel(0.95),
colour = colours["axisLabelColor"]), axis.text.x = element_text(margin = margin(t = 0.8 *
base_size/4), angle = axis_text_angle, hjust = ifelse(axis_text_angle %in%
c(45, 90, 270), 1, 0.5), vjust = ifelse(axis_text_angle %in%
c(0, 90, 270), 0.5, 1)), axis.text.x.top = element_text(margin = margin(b = 0.8 *
base_size/4), vjust = 0), axis.text.y = element_text(margin = margin(r = 0.5 *
base_size/4), hjust = 1), axis.text.y.right = element_text(margin = margin(l = 0.5 *
base_size/4), hjust = 0), axis.ticks = element_line(),
axis.ticks.length = unit(3, "points"), axis.ticks.length.x = NULL,
axis.ticks.length.x.top = NULL, axis.ticks.length.x.bottom = NULL,
axis.ticks.length.y = NULL, axis.ticks.length.y.left = NULL,
axis.ticks.length.y.right = NULL, axis.title = element_text(colour = colours["axisTitleColor"]),
axis.title.x = element_text(margin = margin(t = base_size *
0.6), vjust = 1), axis.title.x.top = element_text(margin = margin(b = base_size *
0.6), vjust = 0), axis.title.y = element_text(angle = 90,
margin = margin(r = base_size * 0.6), vjust = 1),
axis.title.y.right = element_text(angle = -90, margin = margin(l = base_size *
0.6), vjust = 0), legend.background = element_blank(),
legend.spacing = unit(base_size, "pt"), legend.spacing.x = NULL,
legend.spacing.y = NULL, legend.margin = margin(base_size/2,
base_size/2, base_size/2, base_size/2), legend.key = element_blank(),
legend.key.size = unit(1.2, "lines"), legend.key.height = NULL,
legend.key.width = unit(base_size * 1.8, "pt"), legend.text = element_text(size = rel(0.8),
face = "plain"), legend.text.align = NULL, legend.title = element_blank(),
legend.title.align = NULL, legend.position = "right",
legend.direction = NULL, legend.justification = "center",
legend.box = NULL, legend.box.margin = margin(0, 0, 0,
0, "cm"), legend.box.background = element_blank(),
legend.box.spacing = unit(base_size, "pt"), panel.background = element_rect(fill = ifelse(palette ==
"office", colours["plottingAreaColor"], NA), colour = NA),
panel.border = panel.border, panel.grid = element_blank(),
panel.grid.minor = element_blank(), panel.spacing = unit(base_size/2,
"pt"), panel.spacing.x = NULL, panel.spacing.y = NULL,
panel.ontop = FALSE, strip.background = element_blank(),
strip.text = element_text(colour = colours["axisTitleColor"],
size = rel(0.8), margin = margin(base_size/2.5, base_size/2.5,
base_size/2.5, base_size/2.5)), strip.text.x = element_text(margin = margin(b = base_size/3)),
strip.text.y = element_text(angle = -90, margin = margin(l = base_size/3)),
strip.text.y.left = element_text(angle = 90), strip.placement = "inside",
strip.placement.x = NULL, strip.placement.y = NULL, strip.switch.pad.grid = unit(base_size/4,
"pt"), strip.switch.pad.wrap = unit(base_size/4,
"pt"), plot.background = element_rect(fill = colours["pageBackgroundColor"],
colour = NA), plot.title = element_text(size = rel(1.2),
hjust = 0.5, vjust = 1, margin = margin(b = base_size)),
plot.title.position = "panel", plot.subtitle = element_text(hjust = 0.5,
vjust = 1, margin = margin(b = base_size/2)), plot.caption = element_text(size = rel(0.8),
hjust = 1, vjust = 1, margin = margin(t = base_size/2)),
plot.caption.position = "panel", plot.tag = element_text(size = rel(1.2),
hjust = 0.5, vjust = 0.5), plot.tag.position = "topleft",
plot.margin = margin(base_size/2, base_size/2, base_size/2,
base_size/2), complete = TRUE)
ggprism::ggprism_data$themes[["all_null"]] %+replace% t
}
# Load libraries
library(dplyr); library(purrr); library(stringr)
library(ggplot2); library(ggpubr); library(jcolors)
library(cowplot); library(ggprism); library(tidybayes)
library(reshape2); library(parallel); library(rstan)
effect_size = c("Paper Effect Size",
"Paper Effect Size/2",
"Paper Effect Size/3",
"Paper Effect Size/4")
# Functions
psoftmax <- function(b) exp(c(0, b)) / sum(exp( c(0, b) ))
words_replace <- function(variable, words_to_replace, replace_with = "") {
library(dplyr)
if (!require(dplyr)) {
install.packages("dplyr")
library(dplyr)
}
# variable <- enquo(variable) var <- select(data, !!variable) %>% .[,]
if (!is.character(variable))
variable <- as.character(variable)
for (word_i in 1:length(words_to_replace)) {
word_to_rm_index <- which(str_detect(variable, fixed(words_to_replace[word_i])))
if (any(word_to_rm_index)) {
words_to_replace_i <- words_to_replace[word_i]
new_words <- sapply(seq_along(word_to_rm_index), function(i) {
variable[word_to_rm_index][i] <- gsub(words_to_replace_i, replace_with,
variable[word_to_rm_index][i], fixed = TRUE)
})
variable[word_to_rm_index] <- new_words
} else {
warning(paste0("Sting '", words_to_replace, "' not found"))
}
}
return(variable)
}
seq_vector <- function(x) {
idx <- c(which(diff(x) != 0), length(x))
time <- c(idx[1], diff(idx))
rep(x = 1:length(idx), times = time)
}
# Load data
data_short <- readRDS('../Pilot/Short Version/Data/data_short.rds')$data %>%
mutate(subject=1:n()) %>%
rename(age=`Age.`, A3=`A3.`)
questions  <- readRDS('../Pilot/Short Version/Data/data_short.rds')$question
# ----- Mental Accounting ----- #
# Remove final questionnaires
data_short_MA <- data_short[, -(48:75)]
# Remove response time
idx_time      <- str_detect( names(data_short_MA),  'time_')
data_short_MA <- data_short_MA[, !idx_time]
data_short_MA <- data_short_MA %>%
rename_with(~gsub('.', '', .x, fixed = TRUE)) %>%
rename_with(toupper, .cols = -contains('subject'))
n_sbj <- nrow( data_short_MA )
# Create dataframe scenario 2
df <- data_short_MA %>%
select(contains('B', ignore.case =  F))
col_names <- names(df)
cost <- rep(c(0, 5, 10), each=2)
market_value <- rep(c(5, 10), 3)
col_idx <- seq(1,ncol(df),2)
df1 <- map_df(seq_along(col_idx), function(i){
data.frame( response = c(df[,col_names[col_idx[i]]], df[,col_names[col_idx[i]+1]]),
cost = cost[i],
market_value = market_value[i],
buyer = c(rep('Friend', n_sbj), rep('Stranger', n_sbj)) )
})
data_s2 <- df1 %>%
mutate(response=ifelse(response%in%unique(cost), response, 'Other'),
response = factor(response, levels = c('0', '5', '10', 'Other')))
data_s2 %>%
group_by(cost, market_value, buyer) %>%
count(response, .drop = F) %>%
ggplot(aes(response, n, fill=buyer)) +
geom_bar(stat="identity", position=position_dodge(), color="black") +
mytheme() +
scale_fill_jcolors(palette = 'pal6') +
# scale_y_continuous(labels=scales::percent, guide = "prism_offset", breaks = ) +
# scale_x_discrete(guide = "prism_offset", breaks) +
# scale_x_continuous(breaks = 1:4) +
labs(y=NULL, x=NULL) +
facet_grid(cost~market_value)
data_s2
data_short_MA %>%
select(contains('B', ignore.case =  F))
# Create dataframe scenario 2
df <- data_short_MA %>%
select(contains('B', ignore.case =  F))
col_names <- names(df)
cost <- rep(c(0, 5, 10), each=2)
market_value <- rep(c(5, 10), 3)
col_idx <- seq(1,ncol(df),2)
col_idx
col_idx <- seq(1,ncol(df),2)
df1 <- map_df(seq_along(col_idx), function(i){
data.frame( response = c(df[,col_names[col_idx[i]]], df[,col_names[col_idx[i]+1]]),
cost = cost[i],
market_value = market_value[i],
buyer = c(rep('Friend', n_sbj), rep('Stranger', n_sbj)) )
})
df1
data_s2 <- df1 %>%
mutate(response = ifelse(response>=market_value, 1, 0))
data_s2
data_s2 %>%
group_by(buyer) %>%
summarise( mean(response) )
data_s2 %>%
group_by(buyer) %>%
summarise( m = mean(response),
se = sd(response)/sqrt(n()))
data_s2 %>%
group_by(buyer) %>%
summarise( m = mean(response),
se = sd(response)/sqrt(n())) %>%
ggplot(aes(buyer, m)) +
geom_bar(stat="identity", position=position_dodge(), color="black")
data_s2 %>%
group_by(buyer) %>%
summarise( m = mean(response),
se = sd(response)/sqrt(n())) %>%
ggplot(aes(buyer, m)) +
geom_bar(stat="identity", position=position_dodge(), color="black") +
scale_fill_jcolors(palette = 'pal6') +
data_s2 %>%
group_by(cost, market_value, buyer) %>%
count(response, .drop = F) %>%
ggplot(aes(response, n, fill=buyer)) +
geom_bar(stat="identity", position=position_dodge(), color="black") +
mytheme() +
scale_fill_jcolors(palette = 'pal6') +
# scale_y_continuous(labels=scales::percent, guide = "prism_offset", breaks = ) +
# scale_x_discrete(guide = "prism_offset", breaks) +
# scale_x_continuous(breaks = 1:4) +
labs(y=NULL, x=NULL) +
facet_grid(cost~market_value)
data_s2 %>%
group_by(buyer) %>%
summarise( m = mean(response),
se = sd(response)/sqrt(n())) %>%
ggplot(aes(buyer, m)) +
geom_bar(stat="identity", position=position_dodge(), color="black") +
scale_fill_jcolors(palette = 'pal6')
data_s2 %>%
group_by(buyer) %>%
summarise( m = mean(response),
se = sd(response)/sqrt(n())) %>%
ggplot(aes(buyer, m, fill=buyer)) +
geom_bar(stat="identity", position=position_dodge(), color="black") +
scale_fill_jcolors(palette = 'pal6')
data_s2 %>%
group_by(buyer) %>%
summarise( m = mean(response),
se = sd(response)/sqrt(n())) %>%
ggplot(aes(buyer, m, fill=buyer)) +
geom_bar(stat="identity", position=position_dodge(), color="black") +
scale_fill_jcolors(palette = 'pal6') +
labs(y='P(Price ≥ Market Value)')
data_s2 %>%
group_by(buyer) %>%
summarise( m = mean(response),
se = sd(response)/sqrt(n())) %>%
ggplot(aes(buyer, m, fill=buyer)) +
geom_bar(stat="identity", position=position_dodge(), color="black") +
scale_fill_jcolors(palette = 'pal6') +
labs(y='P(Price ≥ Market Value)') +
mytheme()
data_s2 %>%
group_by(buyer) %>%
summarise( m = mean(response),
se = sd(response)/sqrt(n())) %>%
ggplot(aes(buyer, m, fill=buyer)) +
geom_bar(stat="identity", position=position_dodge(), color="black") +
scale_fill_jcolors(palette = 'pal6') +
labs(y='P(Price ≥ Market Value)') +
scale_y_continuous(limits = 0:1) +
mytheme()
data_s2 %>%
group_by(buyer) %>%
summarise( m = mean(response),
se = sd(response)/sqrt(n())) %>%
ggplot(aes(buyer, m, fill=buyer)) +
geom_bar(stat="identity", position=position_dodge(), color="black") +
scale_fill_jcolors(palette = 'pal6') +
labs(y='P(Price ≥ Market Value)', x='Buyer') +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank(),
legend.position = c(0.5, 0.8)) +
scale_y_continuous(limits = 0:1) +
mytheme()
data_s2 %>%
group_by(buyer) %>%
summarise( m = mean(response),
se = sd(response)/sqrt(n())) %>%
ggplot(aes(buyer, m, fill=buyer)) +
geom_bar(stat="identity", position=position_dodge(), color="black") +
scale_fill_jcolors(palette = 'pal6') +
labs(y='P(Price ≥ Market Value)', x='Buyer') +
mytheme()
data_s2 %>%
group_by(buyer) %>%
summarise( m = mean(response),
se = sd(response)/sqrt(n())) %>%
ggplot(aes(buyer, m, fill=buyer)) +
geom_bar(stat="identity", position=position_dodge(), color="black") +
scale_fill_jcolors(palette = 'pal6') +
labs(y='P(Price ≥ Market Value)', x='Buyer') +
mytheme() +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank(),
legend.position = c(0.5, 0.8)) +
scale_y_continuous(limits = 0:1)
data_s2 %>%
group_by(buyer) %>%
summarise( m = mean(response),
se = sd(response)/sqrt(n())) %>%
ggplot(aes(buyer, m, fill=buyer)) +
geom_bar(stat="identity", position=position_dodge(), color="black") +
scale_fill_jcolors(palette = 'pal6') +
labs(y='P(Price ≥ Market Value)', x='Buyer') +
mytheme() +
theme(legend.position = 'none') +
scale_y_continuous(limits = 0:1)
data_s2 %>%
group_by(buyer) %>%
summarise( m = mean(response),
se = sd(response)/sqrt(n())) %>%
ggplot(aes(buyer, m, fill=buyer)) +
geom_bar(stat="identity", position=position_dodge(), color="black") +
scale_fill_jcolors(palette = 'pal6') +
labs(y='P(Price ≥ Market Value)', x='Buyer') +
mytheme() +
theme(legend.position = 'none') +
scale_y_continuous(limits = 0:1)
lazyLoad('Report_cache/html/fit-stan-model-S2_87e0ddbf0dc856b83fa4de1a521af9a9')
fit_S2
data_s2
X
model.matrix(~ buyer, data_s2)
stan_data$X
stan_data$N
lazyLoad('Report_cache/html/fit-stan-model-S2_87e0ddbf0dc856b83fa4de1a521af9a9')
lazyLoad('Report_cache/html/fit-stan-model-S2_001b5ab234ac5e97fd54aab067ea1d96')
X
bernoulli_scenario_2
fit_S2
lazyLoad('Report_cache/html/fit-stan-model-S2_bdb80f9867a8badfc09c8a6aced60ec9')
fit_S2
extract(fit_S2)$b %>%
melt(value.name = "post") %>%
mutate(Var2 = ifelse(Var2 == 1, "Intercept", "")) %>%
filter(Var2 != "Intercept") %>%
ggplot(aes(x = post, y = Var2)) + stat_halfeye(fill = jcolors::jcolors(palette = "pal8")[6],
color = jcolors::jcolors(palette = "pal8")[12]) + mytheme() + geom_vline(xintercept = 0,
linetype = 2) + labs(y = NULL, x = "Posterior Probability", title = "Low - High")
