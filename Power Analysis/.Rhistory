sf <- samplingfunction
} else if( es==2 ){
sf <- samplingfunction2
} else if( es==3 ){
sf <- samplingfunction3
} else {
sf <- samplingfunction4
}
sf
power <- data.frame()
n_sbj_range
n_sbj_range=10
n=10
n=8
for (n in n_sbj_range) {
message("\nN Subjects: ", n, "\n")
message("Setting up Clusters...")
cl <- parallel::makeCluster(nClusters, outfile = "")
parallel::clusterExport(cl, c("multinomial_scenario_2", "n_sbj_range", "sim_y",
"cost", "market_value", "buyer",
"linear_effect", "n"))
out <- map_dfr(seq_len(round(n_sim/nModels)), function(i) {
message("\r", "Simulation: ", i * nModels, "/", n_sim, appendLF = FALSE)
parallel::parLapply(cl, 1:nModels, sf)
})
power <- rbind(power, out)
message("\nShutting down Clusters...")
parallel::stopCluster(cl)
}
n_sim=8
n_sbj_range
for (n in n_sbj_range) {
message("\nN Subjects: ", n, "\n")
message("Setting up Clusters...")
cl <- parallel::makeCluster(nClusters, outfile = "")
parallel::clusterExport(cl, c("multinomial_scenario_2", "n_sbj_range", "sim_y",
"cost", "market_value", "buyer",
"linear_effect", "n"))
out <- map_dfr(seq_len(round(n_sim/nModels)), function(i) {
message("\r", "Simulation: ", i * nModels, "/", n_sim, appendLF = FALSE)
parallel::parLapply(cl, 1:nModels, sf)
})
power <- rbind(power, out)
message("\nShutting down Clusters...")
parallel::stopCluster(cl)
}
out[[i]] <- power
n_sbj_range
n_sbj_range
out <- list()
for( es in 1:4 ){
message("\n\nN Original effect size / ", es, "\n")
if(es==1){
sf <- samplingfunction
} else if( es==2 ){
sf <- samplingfunction2
} else if( es==3 ){
sf <- samplingfunction3
} else {
sf <- samplingfunction4
}
power <- data.frame()
for (n in n_sbj_range) {
message("\nN Subjects: ", n, "\n")
message("Setting up Clusters...")
cl <- parallel::makeCluster(nClusters, outfile = "")
parallel::clusterExport(cl, c("multinomial_scenario_2", "n_sbj_range", "sim_y",
"cost", "market_value", "buyer",
"linear_effect", "n"))
out <- map_dfr(seq_len(round(n_sim/nModels)), function(i) {
message("\r", "Simulation: ", i * nModels, "/", n_sim, appendLF = FALSE)
parallel::parLapply(cl, 1:nModels, sf)
})
power <- rbind(power, out)
message("\nShutting down Clusters...")
parallel::stopCluster(cl)
}
out[[es]] <- power
}
View(out)
out <- list()
message("\n\nN Original effect size / ", es, "\n")
if(es==1){
sf <- samplingfunction
} else if( es==2 ){
sf <- samplingfunction2
} else if( es==3 ){
sf <- samplingfunction3
} else {
sf <- samplingfunction4
}
power <- data.frame()
message("\nN Subjects: ", n, "\n")
message("Setting up Clusters...")
cl <- parallel::makeCluster(nClusters, outfile = "")
parallel::clusterExport(cl, c("multinomial_scenario_2", "n_sbj_range", "sim_y",
"cost", "market_value", "buyer",
"linear_effect", "n"))
out <- map_dfr(seq_len(round(n_sim/nModels)), function(i) {
message("\r", "Simulation: ", i * nModels, "/", n_sim, appendLF = FALSE)
parallel::parLapply(cl, 1:nModels, sf)
})
lazyLoad('Report_cache/html/power-analysis-computation-effsize-S2_a6f53bb75282af212a0f0332ae5ed9e3')
out_power
map_dfr(1:4, function(i){
out_power[[i]] %>% mutate(effsize = paste0("Paper Effect Size / ", i))
})
purrr::map_dfr(1:4, function(i){
out_power[[i]] %>% mutate(effsize = paste0("Paper Effect Size / ", i))
})
library(dplyr)
purrr::map_dfr(1:4, function(i){
out_power[[i]] %>% mutate(effsize = paste0("Paper Effect Size / ", i))
})
es <- c("Paper Effect Size / ", paste0("Paper Effect Size / ", 2:4))
es
es <- c("Paper Effect Size", paste0("Paper Effect Size / ", 2:4))
map_dfr(1:4, function(i){
out_power[[i]] %>% mutate(effsize = es[i])
})
library(purrr)
es <- c("Paper Effect Size", paste0("Paper Effect Size / ", 2:4))
map_dfr(1:4, function(i){
out_power[[i]] %>% mutate(effsize = es[i])
})
es <- c("Paper Effect Size", paste0("Paper Effect Size / ", 2:4))
map_dfr(1:4, function(i){
out_power[[i]] %>% mutate(effsize = es[i],
sim=rep(1:(n_sim*length(n_sbj_range)), each=3))
})
n_sim=200
n_sbj_range <- c(10, 50, 100, 150, 200, 250, 300)
es <- c("Paper Effect Size", paste0("Paper Effect Size / ", 2:4))
map_dfr(1:4, function(i){
out_power[[i]] %>% mutate(effsize = es[i],
sim=rep(1:(n_sim*length(n_sbj_range)), each=3))
})
es <- c("Paper Effect Size", paste0("Paper Effect Size / ", 2:4))
map_dfr(1:4, function(i){
out_power[[i]] %>% mutate(effsize = es[i],
sim=rep(1:(n_sim*length(n_sbj_range)), each=3))
}) %>%
mutate(effsize = factor(effsize, levels = effect_size))
es <- c("Paper Effect Size", paste0("Paper Effect Size / ", 2:4))
map_dfr(1:4, function(i){
out_power[[i]] %>% mutate(effsize = es[i],
sim=rep(1:(n_sim*length(n_sbj_range)), each=3))
}) %>%
mutate(effsize = factor(effsize, levels = es))
pwr
install.packages('pwr')
library(pwr)
pwr::pwr.t.test(n = 50, sig.level = 0.05, power = 0.8, type = 'paired')
pwr::pwr.t.test(n = 60, sig.level = 0.05, power = 0.8, type = 'paired')
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE, fig.align='left')
library(knitr)
## Global options
options(max.print="75")
opts_chunk$set(
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE
)
opts_knit$set(width=75)
mytheme <- function (palette = "black_and_white", base_size = 14, base_family = "sans",
base_fontface = "plain", base_line_size = base_size/20, base_rect_size = base_size/14,
axis_text_angle = 0, border = FALSE) {
is_bool <- function(x) {
is_logical(x, n = 1) && !is.na(x)
}
angle <- axis_text_angle[1]
if (!angle %in% c(0, 45, 90, 270))
stop(sprintf("'axis_text_angle' must be one of [%s]",
paste(c(0, 45, 90, 270), collapse = ", ")), ".\nFor other angles, use the guide_axis() function in ggplot2 instead",
call. = FALSE)
if (!palette %in% names(ggprism::ggprism_data$themes)) {
stop("The palette ", paste(palette), " does not exist.\n         See names(ggprism_data$themes) for valid palette names")
}
colours <- tibble::deframe(ggprism::ggprism_data$themes[[palette]])
if (!is_bool(border)) {
stop("border must be either: TRUE or FALSE")
}
else {
if (border) {
panel.border <- element_rect(fill = NA)
axis.line <- element_blank()
}
else if (!border) {
panel.border <- element_blank()
axis.line <- element_line()
}
}
t <- theme(line = element_line(colour = colours["axisColor"],
size = base_line_size, linetype = 1, lineend = "square"),
rect = element_rect(fill = "white", colour = colours["axisColor"],
size = base_rect_size, linetype = 1), text = element_text(family = base_family,
face = base_fontface, colour = colours["graphTitleColor"],
size = base_size, lineheight = 0.9, hjust = 0.5,
vjust = 0.5, angle = 0, margin = margin(), debug = FALSE),
prism.ticks.length = unit(base_size/50, "pt"), axis.line = axis.line,
axis.line.x = NULL, axis.line.y = NULL, axis.text = element_text(size = rel(0.95),
colour = colours["axisLabelColor"]), axis.text.x = element_text(margin = margin(t = 0.8 *
base_size/4), angle = axis_text_angle, hjust = ifelse(axis_text_angle %in%
c(45, 90, 270), 1, 0.5), vjust = ifelse(axis_text_angle %in%
c(0, 90, 270), 0.5, 1)), axis.text.x.top = element_text(margin = margin(b = 0.8 *
base_size/4), vjust = 0), axis.text.y = element_text(margin = margin(r = 0.5 *
base_size/4), hjust = 1), axis.text.y.right = element_text(margin = margin(l = 0.5 *
base_size/4), hjust = 0), axis.ticks = element_line(),
axis.ticks.length = unit(3, "points"), axis.ticks.length.x = NULL,
axis.ticks.length.x.top = NULL, axis.ticks.length.x.bottom = NULL,
axis.ticks.length.y = NULL, axis.ticks.length.y.left = NULL,
axis.ticks.length.y.right = NULL, axis.title = element_text(colour = colours["axisTitleColor"]),
axis.title.x = element_text(margin = margin(t = base_size *
0.6), vjust = 1), axis.title.x.top = element_text(margin = margin(b = base_size *
0.6), vjust = 0), axis.title.y = element_text(angle = 90,
margin = margin(r = base_size * 0.6), vjust = 1),
axis.title.y.right = element_text(angle = -90, margin = margin(l = base_size *
0.6), vjust = 0), legend.background = element_blank(),
legend.spacing = unit(base_size, "pt"), legend.spacing.x = NULL,
legend.spacing.y = NULL, legend.margin = margin(base_size/2,
base_size/2, base_size/2, base_size/2), legend.key = element_blank(),
legend.key.size = unit(1.2, "lines"), legend.key.height = NULL,
legend.key.width = unit(base_size * 1.8, "pt"), legend.text = element_text(size = rel(0.8),
face = "plain"), legend.text.align = NULL, legend.title = element_blank(),
legend.title.align = NULL, legend.position = "right",
legend.direction = NULL, legend.justification = "center",
legend.box = NULL, legend.box.margin = margin(0, 0, 0,
0, "cm"), legend.box.background = element_blank(),
legend.box.spacing = unit(base_size, "pt"), panel.background = element_rect(fill = ifelse(palette ==
"office", colours["plottingAreaColor"], NA), colour = NA),
panel.border = panel.border, panel.grid = element_blank(),
panel.grid.minor = element_blank(), panel.spacing = unit(base_size/2,
"pt"), panel.spacing.x = NULL, panel.spacing.y = NULL,
panel.ontop = FALSE, strip.background = element_blank(),
strip.text = element_text(colour = colours["axisTitleColor"],
size = rel(0.8), margin = margin(base_size/2.5, base_size/2.5,
base_size/2.5, base_size/2.5)), strip.text.x = element_text(margin = margin(b = base_size/3)),
strip.text.y = element_text(angle = -90, margin = margin(l = base_size/3)),
strip.text.y.left = element_text(angle = 90), strip.placement = "inside",
strip.placement.x = NULL, strip.placement.y = NULL, strip.switch.pad.grid = unit(base_size/4,
"pt"), strip.switch.pad.wrap = unit(base_size/4,
"pt"), plot.background = element_rect(fill = colours["pageBackgroundColor"],
colour = NA), plot.title = element_text(size = rel(1.2),
hjust = 0.5, vjust = 1, margin = margin(b = base_size)),
plot.title.position = "panel", plot.subtitle = element_text(hjust = 0.5,
vjust = 1, margin = margin(b = base_size/2)), plot.caption = element_text(size = rel(0.8),
hjust = 1, vjust = 1, margin = margin(t = base_size/2)),
plot.caption.position = "panel", plot.tag = element_text(size = rel(1.2),
hjust = 0.5, vjust = 0.5), plot.tag.position = "topleft",
plot.margin = margin(base_size/2, base_size/2, base_size/2,
base_size/2), complete = TRUE)
ggprism::ggprism_data$themes[["all_null"]] %+replace% t
}
# Load libraries
library(dplyr); library(purrr); library(stringr)
library(ggplot2); library(ggpubr); library(jcolors)
library(cowplot); library(ggprism); library(tidybayes)
library(reshape2); library(parallel); library(rstan)
effect_size = c("Paper Effect Size",
"Paper Effect Size/2",
"Paper Effect Size/3",
"Paper Effect Size/4")
# Functions
psoftmax <- function(b) exp(c(0, b)) / sum(exp( c(0, b) ))
words_replace <- function(variable, words_to_replace, replace_with = "") {
library(dplyr)
if (!require(dplyr)) {
install.packages("dplyr")
library(dplyr)
}
# variable <- enquo(variable) var <- select(data, !!variable) %>% .[,]
if (!is.character(variable))
variable <- as.character(variable)
for (word_i in 1:length(words_to_replace)) {
word_to_rm_index <- which(str_detect(variable, fixed(words_to_replace[word_i])))
if (any(word_to_rm_index)) {
words_to_replace_i <- words_to_replace[word_i]
new_words <- sapply(seq_along(word_to_rm_index), function(i) {
variable[word_to_rm_index][i] <- gsub(words_to_replace_i, replace_with,
variable[word_to_rm_index][i], fixed = TRUE)
})
variable[word_to_rm_index] <- new_words
} else {
warning(paste0("Sting '", words_to_replace, "' not found"))
}
}
return(variable)
}
seq_vector <- function(x) {
idx <- c(which(diff(x) != 0), length(x))
time <- c(idx[1], diff(idx))
rep(x = 1:length(idx), times = time)
}
# Load data
data_short <- readRDS('../Pilot/Short Version/Data/data_short.rds')$data %>%
mutate(subject=1:n()) %>%
rename(age=`Age.`, A3=`A3.`)
questions  <- readRDS('../Pilot/Short Version/Data/data_short.rds')$question
# ----- Mental Accounting ----- #
# Remove final questionnaires
data_short_MA <- data_short[, -(48:75)]
# Remove response time
idx_time      <- str_detect( names(data_short_MA),  'time_')
data_short_MA <- data_short_MA[, !idx_time]
data_short_MA <- data_short_MA %>%
rename_with(~gsub('.', '', .x, fixed = TRUE)) %>%
rename_with(toupper, .cols = -contains('subject'))
n_sbj <- nrow( data_short_MA )
cost
rep(0, round(31*0.68))
rbind(
data.frame(
market_value = 5,
response = c(rep(0, round(31*0.68)), rep(5, round(31*0.26)), rep(10, round(31*0.03)))
),
data.frame(
market_value = 5,
response = c(rep(0, round(28*0.14)), rep(5, round(28*0.79)), rep(10, round(28*0.0)))
),
data.frame(
market_value = 5,
response = c(rep(0, round(26*0.0)), rep(5, round(26*0.15)), rep(10, round(26*0.69)))
)
)
rbind(
data.frame(
market_value = 5, buyer = 'Friend',
response = c(rep(0, round(31*0.68)), rep(5, round(31*0.26)), rep(10, round(31*0.03)))
),
data.frame(
market_value = 5, buyer = 'Friend',
response = c(rep(0, round(28*0.14)), rep(5, round(28*0.79)), rep(10, round(28*0.0)))
),
data.frame(
market_value = 5, buyer = 'Friend',
response = c(rep(0, round(26*0.0)), rep(5, round(26*0.15)), rep(10, round(26*0.69)))
)
)
rbind(
# Buyer
rbind(
data.frame(
market_value = 5, buyer = 'Friend',
response = c(rep(0, round(31*0.68)), rep(5, round(31*0.26)), rep(10, round(31*0.03)))
),
data.frame(
market_value = 5, buyer = 'Friend',
response = c(rep(0, round(28*0.14)), rep(5, round(28*0.79)), rep(10, round(28*0.0)))
),
data.frame(
market_value = 5, buyer = 'Friend',
response = c(rep(0, round(26*0.0)), rep(5, round(26*0.15)), rep(10, round(26*0.69)))
)
),
# Stranger
rbind(
data.frame(
market_value = 5, buyer = 'Stranger',
response = c(rep(0, round(31*0.06)), rep(5, round(31*0.77)), rep(10, round(31*0.10)))
),
data.frame(
market_value = 5, buyer = 'Stranger',
response = c(rep(0, round(28*0.0)), rep(5, round(28*0.79)), rep(10, round(28*0.07)))
),
data.frame(
market_value = 5, buyer = 'Stranger',
response = c(rep(0, round(26*0.0)), rep(5, round(26*0.42)), rep(10, round(26*0.46)))
)
)
)
rbind(
# Buyer
rbind(
# Market Value = 5
data.frame(
market_value = 5, buyer = 'Friend',
response = c(rep(0, round(31*0.68)), rep(5, round(31*0.26)), rep(10, round(31*0.03)))
),
data.frame(
market_value = 5, buyer = 'Friend',
response = c(rep(0, round(28*0.14)), rep(5, round(28*0.79)), rep(10, round(28*0.0)))
),
data.frame(
market_value = 5, buyer = 'Friend',
response = c(rep(0, round(26*0.0)), rep(5, round(26*0.69)), rep(10, round(26*0.23)))
),
# Market Value = 10
data.frame(
market_value = 10, buyer = 'Friend',
response = c(rep(0, round(31*0.66)), rep(5, round(31*0.26)), rep(10, round(31*0.06)))
),
data.frame(
market_value = 10, buyer = 'Friend',
response = c(rep(0, round(28*0.07)), rep(5, round(28*0.79)), rep(10, round(28*0.04)))
),
data.frame(
market_value = 10, buyer = 'Friend',
response = c(rep(0, round(26*0.0)), rep(5, round(26*0.15)), rep(10, round(26*0.69)))
)
),
# Stranger
rbind(
# Market Value = 5
data.frame(
market_value = 5, buyer = 'Stranger',
response = c(rep(0, round(31*0.06)), rep(5, round(31*0.77)), rep(10, round(31*0.10)))
),
data.frame(
market_value = 5, buyer = 'Stranger',
response = c(rep(0, round(28*0.0)), rep(5, round(28*0.79)), rep(10, round(28*0.07)))
),
data.frame(
market_value = 5, buyer = 'Stranger',
response = c(rep(0, round(26*0.0)), rep(5, round(26*0.42)), rep(10, round(26*0.46)))
),
# Market Value = 10
data.frame(
market_value = 10, buyer = 'Stranger',
response = c(rep(0, round(31*0.06)), rep(5, round(31*0.16)), rep(10, round(31*0.58)))
),
data.frame(
market_value = 10, buyer = 'Stranger',
response = c(rep(0, round(28*0.0)), rep(5, round(28*0.14)), rep(10, round(28*0.57)))
),
data.frame(
market_value = 10, buyer = 'Stranger',
response = c(rep(0, round(26*0.0)), rep(5, round(26*0.0)), rep(10, round(26*0.73)))
)
)
)
data_paper <- rbind(
# Buyer
rbind(
# Market Value = 5
data.frame(
market_value = 5, buyer = 'Friend',
response = c(rep(0, round(31*0.68)), rep(5, round(31*0.26)), rep(10, round(31*0.03)))
),
data.frame(
market_value = 5, buyer = 'Friend',
response = c(rep(0, round(28*0.14)), rep(5, round(28*0.79)), rep(10, round(28*0.0)))
),
data.frame(
market_value = 5, buyer = 'Friend',
response = c(rep(0, round(26*0.0)), rep(5, round(26*0.69)), rep(10, round(26*0.23)))
),
# Market Value = 10
data.frame(
market_value = 10, buyer = 'Friend',
response = c(rep(0, round(31*0.66)), rep(5, round(31*0.26)), rep(10, round(31*0.06)))
),
data.frame(
market_value = 10, buyer = 'Friend',
response = c(rep(0, round(28*0.07)), rep(5, round(28*0.79)), rep(10, round(28*0.04)))
),
data.frame(
market_value = 10, buyer = 'Friend',
response = c(rep(0, round(26*0.0)), rep(5, round(26*0.15)), rep(10, round(26*0.69)))
)
),
# Stranger
rbind(
# Market Value = 5
data.frame(
market_value = 5, buyer = 'Stranger',
response = c(rep(0, round(31*0.06)), rep(5, round(31*0.77)), rep(10, round(31*0.10)))
),
data.frame(
market_value = 5, buyer = 'Stranger',
response = c(rep(0, round(28*0.0)), rep(5, round(28*0.79)), rep(10, round(28*0.07)))
),
data.frame(
market_value = 5, buyer = 'Stranger',
response = c(rep(0, round(26*0.0)), rep(5, round(26*0.42)), rep(10, round(26*0.46)))
),
# Market Value = 10
data.frame(
market_value = 10, buyer = 'Stranger',
response = c(rep(0, round(31*0.06)), rep(5, round(31*0.16)), rep(10, round(31*0.58)))
),
data.frame(
market_value = 10, buyer = 'Stranger',
response = c(rep(0, round(28*0.0)), rep(5, round(28*0.14)), rep(10, round(28*0.57)))
),
data.frame(
market_value = 10, buyer = 'Stranger',
response = c(rep(0, round(26*0.0)), rep(5, round(26*0.0)), rep(10, round(26*0.73)))
)
)
) %>%
mutate(response = ifelse(response >= market_value, 1, 0))
data_paper %>% group_by(buyer) %>% summarise(mean(response))
data_paper %>% group_by(buyer) %>% summarise(mean(response)) %>% [,2,drop=T]
data_paper %>% group_by(buyer) %>% summarise(mean(response)) %>% .[,2,drop=T]
p_effect = data_paper %>% group_by(buyer) %>% summarise(mean(response)) %>% .[,2,drop=T]
p_effect
linear_effect <- logit( p_effect )
eff_size = p_effect[2] - p_effect[1]
eff_size
eff_size = linear_effect[2] - linear_effect[1]
logit    = function(p) log(p/(1-p))
p_effect = data_paper %>% group_by(buyer) %>% summarise(mean(response)) %>% .[,2,drop=T]
linear_effect <- logit( p_effect )
eff_size = p_effect[2] - p_effect[1]
eff_size = linear_effect[2] - linear_effect[1]
eff_size
p_effect
lazyLoad('Report_cache/html/power-analysis-computation-effsize-S2_0c135bd6ac55fbd085d86a7f1a5ef55d')
power
