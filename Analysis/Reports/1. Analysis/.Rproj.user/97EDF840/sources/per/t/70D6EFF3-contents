---
title: "TLD fMRI"
subtitle: "Online Sample"
format: 
  html:
    code-fold: true
    code-block-bg: true
    toc: true
    code-block-border-left: "#31BAE9"
    link-external-newwindow: true
crossref:
  fig-title: '**Figure**'
  fig-labels: arabic
  title-delim: "**.**"

knitr:
  opts_chunk:
    warning: false
    message: false

execute:
  cache: true
  warning: false
  message: false
---

```{r Code-to-load-data-and-libraries}
#| code-fold: true
#| code-summary: "Code to load data and libraries"
#| eval: true
#| warning: false
#| message: false

# --- Set variables --- #
nDots <- 100
colL <- as.vector(jcolors::jcolors(palette = "pal6")[4])
colC <- as.vector(jcolors::jcolors(palette = "pal6")[2])
colR <- as.vector(jcolors::jcolors(palette = "pal6")[3])

# ----------- Load libraries ------------ #
library(ggprism)
library(lme4)
library(viridis)
library(dplyr)
library(stringr)
library(purrr)
library(ggplot2)
library(jcolors)
library(GGally)
library(corrplot)
library(ggpubr)
library(effects)
library(rjson)
library(brms)
library(bayesplot)
library(reshape2)
library(cowplot)
rstan::rstan_options(auto_write = TRUE)
library(rstan)
library(tidybayes)
options(mc.cores = 4)
rstan_options(auto_write = TRUE) 

# ----------- Create Functions ------------ # 
z_score <- function(x) as.vector(scale(x))

# ----------- Load Data ------------ # 
data_list <- readRDS('../../Data/data_list.rds')

df2 <- data_list$ct2 %>%
  filter(stage=="second") %>% 
  select(subject, trial, rt, stay, visit, choice, 
         acc, upsA, upsB, evA, evB, vrA, vrB, vrC, mp) %>% 
  mutate(delta_ev = evA-evB, delta_vr=vrA-vrB, delta_ups=upsA-upsB)

df2_visit <- df2 %>% 
  group_by(subject, trial, visit) %>% 
  mutate(samples = n()) %>% 
  filter(row_number()==1) %>% 
  ungroup()


## Find subject that select well
subjects_ok <- data_list$ct1 %>%
  group_by(subject, trial) %>%
  mutate(RV = upsLeft*100 - upsRight*100) %>%
  filter(row_number()==1) %>% 
  group_by(subject) %>%
  do(broom::tidy(
    glm(choice ~ RV, family='binomial', data = .)
    )) %>% 
  ungroup() %>% filter(term=='RV') %>% 
  mutate(subj_ok = ifelse(p.value<0.05&estimate>0, TRUE, FALSE)) %>% 
  filter(subj_ok) %>% select(subject) %>% as.vector() %>% .[['subject']]


subjects_green <- data_list$ct1 %>%
  filter(stage=="second") %>% 
  filter(subject%in%subjects_ok) %>% 
  select(subject, trial, rt, stay, visit, choice, 
         acc, upsL=upsLeft, upsR=upsRight, evL=evLeft, evR=evRight, 
         vrL=vrLeft, vrR=vrRight, vrB=vrBlock, mp) %>% 
  group_by(subject, trial) %>%
  mutate(RU=vrL-vrR, ch  = ifelse(mp=='left', 1, 0)) %>% 
  filter(row_number()==1) %>% 
  group_by(subject) %>%
  do(broom::tidy(
    glm(ch ~ RU, family='binomial', data = .)
  )) %>% 
  ungroup() %>% filter(term=='RU') %>% 
  mutate(subj_ok = ifelse(p.value<0.05, TRUE, FALSE)) %>% 
  filter(subj_ok) %>% select(subject) %>% as.vector() %>% .[['subject']]


```

<br><br><br>

## Task

<br>

Participants performed an information-sampling paradigm. In each trial, participants saw three patches, each containing 100 moving dots. The colour of each dot could be red or black, and the goal in each trial was to select the option with the highest number of red dots. Crucially, at the start of each trial, the colour of the dots was hidden by
a grey cover. Participants could check each option by moving the computer mouse. The following features of the task were designed to investigate the trade-off between time/energy and accuracy and the effect of background uncertainty of risk sensitivity.

*Time/energy -Accuracy Trade-off.* Participants could sample information from a patch by position the mouse pointer on top of it. In so doing, they were able to gradu- ally reveal the colour of the dots by removing the grey covers. Participants had to wait 2 seconds after every new visit (switch), before a new sample could be revealed. After this waiting time, one of the grey dots would be uncovered every 150ms, becoming either red or black. 
In each trial, each patch provided a different amount of initial information. That is, the number of grey dots uncovered after the first patch visit varied between patches in each trial. This feature of the task allowed us to decorrelate the time spent on a patch and the uncertainty about the number of red dots in that patch. The amount of initial information was signalled by green dots. For example, if a patch contained 20 green dots during phase 1 (Figure 1.1), the underlying colour of these 20 green dots would be revealed at the time of the first sample of the first visit during phase 2 of the task.

*Background Uncertainty.* Signalling the amount of initial information allowed participants to form an idea of initial uncertainty for each option. After all green dots were shown, we blocked one of the three options. This is how we operationalized background uncertainty. The blocked option could not be explored or selected. Crucially, participants had learned its uncertainty signalled by the number of green dots before the option was blocked. This uncertainty could not be influenced by participants behaviour, and it was irrelevant to the task of selecting one the two remaining patches based on the number of red dots (see @fig-task).

<br>

::: {}
![Information-sampling task. Schematic representation of the information sampling task.](img/task.svg){width=90% #fig-task}
:::

<br><br><br>

## Descriptive Statistics

<br>

::: {.panel-tabset}

#### Final Selection

```{r select}
#| label: fig-select
#| fig-cap: Effect of uncertainty and expected value on choice.Individual (dots and grey lines) and pooled (bars and coloured lines) effect of uncertainty and expected value (coded as left minus right) on left choice.
#| fig-width: 7
#| fig-height: 3.5

cowplot::plot_grid(
  data_list$ct1 %>%
    group_by(subject, trial) %>%
    mutate(RV = upsLeft*100 - upsRight*100) %>%
    filter(row_number()==1) %>%
    ggplot(aes(RV, choice)) +
    geom_smooth(method = "glm",
                method.args = list(family = "binomial"), color = "gray", se = F, aes(group = subject),
                linewidth = 0.5) +
    geom_smooth(method='glm', method.args=list(family='binomial'),
                linewidth=2, color="#26828EFF", se = F) +
    theme_pubr() + theme(legend.position=c(0.8, 0.3)) +
    labs(y='Probability to Choose Left',
         x = 'Left - Right\n(True Number of Red Dots)') +
    scale_x_continuous(guide = "prism_offset") +
    scale_y_continuous(guide = "prism_offset"),

  data_list$ct1 %>%
    group_by(subject, trial) %>%
    mutate(RV = (vrLeft - vrRight)*10) %>%
    filter(row_number()==n()) %>%
    ggplot(aes(RV, choice)) +
    geom_smooth(method = "glm",
                method.args = list(family = "binomial"), color = "gray", se = F, aes(group = subject),
                linewidth = 0.5) +
    geom_smooth(method='glm', method.args=list(family='binomial'),
                linewidth=2, color="#D5006A", se = F) +
    theme_pubr() + theme(legend.position=c(0.8, 0.3)) +
    labs(y='Probability to Choose Left',
         x = 'Left - Right\n(Final Level of Uncertainty)') +
    scale_x_continuous(guide = "prism_offset", limits = c(-1, 1)) +
    scale_y_continuous(guide = "prism_offset", limits = 0:1)
)

```

#### First Visit

```{r green}
#| label: fig-green
#| fig-cap: Influence of initial uncertainty on first visit. 
#| fig-width: 3.5
#| fig-height: 3.5

data_list$ct1 %>%
  group_by(subject, trial) %>%
  mutate(vrL = vrLeft[1], vrR = vrRight[1], RU=vrL-vrR,
         ch  = ifelse(mp[2]=='left', 1, 0)) %>%
  filter(row_number()==1) %>% select(subject, RU, ch) %>% ungroup() %>%
  ggplot(aes(RU, ch)) +
  geom_smooth(method = "glm",
              method.args = list(family = "binomial"),
              color = "gray", se = F, aes(group = subject),
              size = 0.5) +
  geom_smooth(method='glm', method.args=list(family='binomial'),
              size=2, color=viridis(10)[7], se = F) +
  theme_pubr() + theme(legend.position=c(0.8, 0.3)) +
  labs(y='P(Left is the First Visit)',
       x = expression(Delta~Green~Dots)) +
  scale_x_continuous(guide = "prism_offset") +
  scale_y_continuous(guide = "prism_offset", limits = c(0,1), breaks = seq(0, 1, 0.2))

```

#### Visits and Samples

```{r total-number-of-visits-dynamycs}
#| label: fig-visit-and-samples
#| fig-cap: Descriptive statistics information gathering behaviour.
#| layout-ncol: 1
#| fig-width: 7
#| fig-height: 11.5

# ---------------- Stay vs Switch ---------------- #
df <-  data_list$ct2 %>%
  filter( !is.na(mp) ) %>%
  group_by(subject, trial) %>%
  # Calculate Visit Number (vn) and Total Visit Number (tvn)
  mutate(vn=ifelse(mp=='left', 1, 0),
         vn=data.table::rleid(vn),
         tvn=last(vn)) %>%
  group_by(subject, trial, vn) %>%
  filter(row_number()==1) %>%
  ungroup()

all_vn <- unique(df$vn)
all_sbj <- unique(df$subject)

df_sbj <- map_dfr(all_sbj, function(sbj_i){
  df_sbj_i <- df[df$subject==sbj_i, ]
  tot_n_samples <- nrow(df_sbj_i)
  map_dfr(all_vn, function(vn_i){
    prop_tvn <- df_sbj_i[df_sbj_i$tvn == vn_i, ] %>%
      summarise(prop_tvn = n()/tot_n_samples) %>%
      .[, 'prop_tvn', drop=T]

    data.frame(subject=sbj_i, tvn=vn_i+runif(1, -0.1, 0.1),
               prop_tvn=prop_tvn)
  })
})


df_pooled <- data_list$ct2 %>%
  filter( !is.na(mp) ) %>%
  group_by(subject, trial) %>%
  # Calculate Visit Number (vn) and Total Visit Number (tvn)
  mutate(vn=ifelse(mp=='left', 1, 0),
         vn=data.table::rleid(vn),
         tvn=last(vn)) %>%
  group_by(subject, trial, vn) %>%
  filter(row_number()==1) %>% ungroup() %>%
  mutate(tvn = as.numeric(as.character(tvn)))

plot_vn <- ggplot(df_pooled, aes( tvn )) +
    geom_bar(aes(y = after_stat(count)/sum(after_stat(count))), width = 0.6,
             fill = '#08585A') +
    geom_line(data = df_sbj,
              aes(tvn, prop_tvn, group=subject), size=0.3, color='gray', alpha=0.5) +
    geom_point(data = df_sbj, alpha=0.3,
               aes(tvn, prop_tvn, group=subject), size=2, shape=21,
               color='black', fill='white') +
    theme_pubr() +
    scale_y_continuous(guide = "prism_offset",
                       labels = c('0%', '25%', '50%', '75%'),
                       breaks = seq(0, .75, .25)) +
    labs(y = 'Percentage of Trials', x = 'Total Number of Visits') +
    scale_x_continuous(guide = "prism_offset", breaks = seq(1, 19, 1))



# ---------------- Samples ---------------- #
df <- data_list$ct1 %>%
  filter(!is.na(mp)) %>%
  select(-c(rt, brt, choice, acc)) %>%
  group_by(subject, trial) %>%
  mutate(# Compute Total Visit Number
    vn  = ifelse(mp=='left', 1, 0), # Visit Number
    vn  = data.table::rleid(vn),
    tvn = last(vn)) %>%
  # Filter visit
  group_by(subject, trial, vn) %>%
  mutate(sample = n()) %>%
  filter(row_number()==1) %>%
  ungroup()

pooled_df <- df %>%
  Rmisc::summarySE(., measurevar = 'sample', groupvars = 'vn') %>%
  na.omit()

all_vn <- unique(df$vn)
all_sbj <- unique(df$subject)

sbj_df <- map_dfr(all_sbj, function(sbj_i){
  df_sbj_i <- df[df$subject==sbj_i, ]
  map_dfr(all_vn, function(vn_i){
    sample <- df_sbj_i[df_sbj_i$vn == vn_i, ] %>%
      .[, 'sample', drop=T] %>% mean()

    data.frame(subject=sbj_i, vn=vn_i,
               sample=ifelse( is.nan(sample), 0, sample))
  })
}); sbj_df <- sbj_df %>% mutate(vn = vn+runif(n(), -0.1, 0.1))

plot_vn_smp <- ggplot(pooled_df, aes(vn, sample)) +
    geom_bar(stat = 'identity', width = 0.6, fill="#08585A") +
    geom_line(data = sbj_df, alpha=.3,
              aes(group=subject), size=0.5, color='gray') +

    geom_point(data = sbj_df, alpha=0.3,
               aes(group=subject), size=2, shape=21,
               color='black', fill='white') +

    theme_pubr() +
    scale_y_continuous(guide = "prism_offset") +
    theme(legend.position='none') +
    labs(y = 'Average Number of Samples', x = 'Visit Number') +
    scale_x_continuous(guide = "prism_offset", breaks = seq(1, 19, 1))

plot_vn_ups <-  plot_grid(
   data_list$ct1 %>%
    filter( !is.na(mp) ) %>%
    group_by(subject, trial) %>%
    # Calculate Visit Number (vn) and Total Visit Number (tvn)
    mutate(vn=ifelse(mp=='left', 1, 0),
           vn=data.table::rleid(vn),
           tvn=last(vn),
           Dev = abs(round(upsLeft-upsRight,2)),
           # Dev = cut(Dev, breaks = c(0, 0.1, 0.2, 0.3, 0.4), labels = 1:4)
           ) %>%
     group_by(Dev) %>% 
     mutate(N   = n(),
            se  = sd(tvn)/N,
            tvn = mean(tvn)) %>% 
     select(tvn, se, N) %>% filter(row_number()==1) %>% 
    # Rmisc::summarySE(., measurevar = 'tvn', groupvars = 'Dev') %>%
    na.omit() %>%
    ggplot(aes(Dev, tvn )) +
    geom_ribbon( aes(Dev, ymin=tvn-se, ymax=tvn+se, group=1), fill="#26828EFF", alpha=0.3 ) +
    geom_line( aes(group=1), size=1, color  = "#26828EFF") +
    geom_point( size=2, color  = "#26828EFF") +
    theme_pubr() + theme(text = element_text(size = 15)) +
    labs(x = expression( '|' ~ mu[left] ~ "-" ~ mu[right] ~ "|"),
         y= 'Number of Visits') +
    theme(legend.position='none'),

 data_list$ct1 %>%
    filter( stage=='second' ) %>%
    group_by(subject, trial) %>%
    # Calculate Visit Number (vn) and Total Visit Number (tvn)
    mutate(Dev = abs(round(upsLeft-upsRight,2))) %>%
   group_by(subject, trial, visit) %>% 
   mutate(samples = n()) %>% 
     group_by(Dev) %>% 
     mutate(N   = n(),
            se  = sd(samples)/N,
            samples = mean(samples)) %>% 
     select(samples, se, N) %>% filter(row_number()==1) %>% 
    # Rmisc::summarySE(., measurevar = 'tvn', groupvars = 'Dev') %>%
    na.omit() %>%
    ggplot(aes(Dev, samples )) +
    geom_ribbon( aes(Dev, ymin=samples-se, ymax=samples+se, group=1), fill="#26828EFF", alpha=0.3 ) +
    geom_line( aes(group=1), size=1, color  = "#26828EFF") +
    geom_point( size=2, color  = "#26828EFF") +
    theme_pubr() + theme(text = element_text(size = 15)) +
    labs(x = expression( '|' ~ mu[left] ~ "-" ~ mu[right] ~ "|"),
         y= 'Number of Samples') +
    theme(legend.position='none')
)

plot_grid(plot_vn, plot_vn_smp, plot_vn_ups, ncol = 1, labels = letters[1:3])
```

#### Uncertainty and Accuracy

```{r uncertainty-accuracy}
#| label: fig-uncertainty-and-accuracy
#| fig-cap: Effect of uncertainty on accuracy.
#| layout-ncol: 1
#| fig-width: 3.5
#| fig-height: 3.5

df2_visit %>% 
  ggplot(aes(samples, acc)) +
  geom_smooth(aes(group=subject), linewidth=0.5, method='glm',
              method.args=list(family='binomial'), se=F, color="gray") +
  geom_smooth(method='glm', method.args=list(family='binomial'), 
              se=F, linewidth=2, color="#D7263D") +
  labs(y='Accuracy',
       x = 'Number of Samples') +
  theme_pubr() + theme(legend.position=c(0.8, 0.3)) +
  scale_x_continuous(guide = "prism_offset") +
  scale_y_continuous(guide = "prism_offset")
  

```


:::


<br><br>


## Stay vs Switch

<br>

::: {.panel-tabset}

#### Model Selection

::: {.panel-tabset}

#### Introduction

In this section will fit and compare 4 models:


$Log(Y) = \beta_0 + \beta_1 U_{a} + \beta_2 U_{b} + \beta_3 U_{c} + \beta_4 \Delta EV + \beta_6 Visit$

$Log(Y) = \beta_0 + \beta_1 U_{a} + \beta_2 U_{b} + \beta_3 U_{c} + \beta_4 \Delta EV + \beta_6 Visit + \beta_7 Visit U_{c}$

$Log(Y) = \beta_0 + \beta_1 U_{a} + \beta_2 U_{b} + \beta_3 U_{c} + \beta_4 U_{a} U_{c} + \beta_5 \Delta EV + \beta_6 Visit$

$Log(Y) = \beta_0 + \beta_1 U_{a} + \beta_2 U_{b} + \beta_3 U_{c} + \beta_4 U_{a} U_{c} + \beta_5 \Delta EV + \beta_6 Visit + \beta_7 Visit U_{c}$

<br>

#### Model 0

$Log(Y) = \beta_0 + \beta_1 U_{a} + \beta_2 U_{b} + \beta_3 U_{c} + \beta_4 \Delta EV + \beta_6 Visit$


::: {.panel-tabset}

#### No Exclusion

```{r poisson-regression-data-ne-m00}
#| results: hide
#| code-summary: "Fit Model"
m0 <- glmer(
  formula = samples ~ vrA + vrB + vrC + delta_ups + visit + (vrA + vrC|subject), 
  family = poisson(link = 'log'),
  data = df2_visit
)
```

```{r print-poisson-visit-ne-m00}
#| code-summary: "Print Summary"
#| fig-width: 6
#| fig-height: 4.5

summary(m0)
```

#### Select Exclusion

```{r poisson-regression-data-se-m00}
#| results: hide
#| code-summary: "Fit Model"
fit <- glmer(
  formula = samples ~ vrA + vrB + vrC + delta_ups + visit + (vrA+vrC|subject), 
  family = poisson(link = 'log'),
  data = df2_visit %>%
    filter(subject%in%subjects_ok)
)
```

```{r print-posteriors-poisson-visit-se-m00}
#| code-summary: "Print Summary"
#| fig-width: 6
#| fig-height: 4.5

summary(fit)
```

#### Full Exclusion

```{r poisson-regression-data-m00}
#| results: hide
#| code-summary: "Fit Model"
fit <- glmer(
  formula = samples ~ vrA + vrB + vrC + delta_ups + visit + (vrA+vrC|subject), 
  family = poisson(link = 'log'),
  data = df2_visit %>%
    filter(subject%in%subjects_ok) %>% 
    filter(subject%in%subjects_green)
)
```

```{r print-posteriors-poisson-visit-m00}
#| code-summary: "Print Summary"
#| fig-width: 6
#| fig-height: 4.5

summary(fit)
```

:::



#### Model 1

$Log(Y) = \beta_0 + \beta_1 U_{a} + \beta_2 U_{b} + \beta_3 U_{c} + \beta_4 \Delta EV + \beta_6 Visit + \beta_7 Visit U_{c}$

::: {.panel-tabset}

#### No Exclusion

```{r poisson-regression-data-ne-m01}
#| results: hide
#| code-summary: "Fit Model"
m1 <- glmer(
  formula = samples ~ vrA + vrB + delta_ups + visit*vrC + (vrA + vrC|subject), 
  family = poisson(link = 'log'),
  data = df2_visit
)
```

```{r print-posteriors-poisson-visit-ne-m01}
#| code-summary: "Print Summary"
#| fig-width: 6
#| fig-height: 4.5

summary(m1)
```

:::


#### Model 2

$Log(Y) = \beta_0 + \beta_1 U_{a} + \beta_2 U_{b} + \beta_3 U_{c} + \beta_4 U_{a} U_{c} + \beta_5 \Delta EV + \beta_6 Visit$

::: {.panel-tabset}

#### No Exclusion

```{r poisson-regression-data-ne-m0}
#| results: hide
#| code-summary: "Fit Model"
m2 <- glmer(
  formula = samples ~ vrA*vrC + vrB + delta_ups + visit + (vrA*vrC|subject), 
  family = poisson(link = 'log'),
  data = df2_visit
)
```

```{r print-posteriors-poisson-visit-ne-m0}
#| code-summary: "Print Summary"
#| fig-width: 6
#| fig-height: 4.5

summary(m2)
```

#### Select Exclusion

```{r poisson-regression-data-se-m0}
#| results: hide
#| code-summary: "Fit Model"
fit <- glmer(
  formula = samples ~ vrA*vrC + vrB + delta_ups + visit + (vrA*vrC|subject), 
  family = poisson(link = 'log'),
  data = df2_visit %>%
    filter(subject%in%subjects_ok)
)
```

```{r print-posteriors-poisson-visit-se-m0}
#| code-summary: "Print Summary"
#| fig-width: 6
#| fig-height: 4.5

summary(fit)
```

#### Full Exclusion

```{r poisson-regression-data-m0}
#| results: hide
#| code-summary: "Fit Model"
fit <- glmer(
  formula = samples ~ vrA*vrC + vrB + delta_ups + visit + (vrA*vrC|subject), 
  family = poisson(link = 'log'),
  data = df2_visit %>%
    filter(subject%in%subjects_ok) %>% 
    filter(subject%in%subjects_green)
)
```

```{r print-posteriors-poisson-visit-m0}
#| code-summary: "Print Summary"
#| fig-width: 6
#| fig-height: 4.5

summary(fit)
```

:::


#### Model 3

$Log(Y) = \beta_0 + \beta_1 U_{a} + \beta_2 U_{b} + \beta_3 U_{c} + \beta_4 U_{a} U_{c} + \beta_5 \Delta EV + \beta_6 Visit + \beta_7 Visit U_{c}$

::: {.panel-tabset}

#### No Exclusion

```{r poisson-regression-data-ne}
#| results: hide
#| code-summary: "Fit Model"
m3 <- glmer(
  formula = samples ~ vrA*vrC + vrB + delta_ups + visit*vrC + (vrA*vrC|subject), 
  family = poisson(link = 'log'),
  data = df2_visit
)
```

```{r print-posteriors-poisson-visit-ne}
#| code-summary: "Print Summary"
#| fig-width: 6
#| fig-height: 4.5

summary(m3)
```

#### Select Exclusion

```{r poisson-regression-data-se}
#| results: hide
#| code-summary: "Fit Model"
fit <- glmer(
  formula = samples ~ vrA*vrC + vrB + delta_ups + visit*vrC + (vrA*vrC|subject), 
  family = poisson(link = 'log'),
  data = df2_visit %>%
    filter(subject%in%subjects_ok)
)
```

```{r print-posteriors-poisson-visit-se}
#| code-summary: "Print Summary"
#| fig-width: 6
#| fig-height: 4.5

summary(fit)
```

#### Full Exclusion

```{r poisson-regression-data}
#| results: hide
#| code-summary: "Fit Model"
fit <- glmer(
  formula = samples ~ vrA*vrC + vrB + delta_ups + visit*vrC + (vrA*vrC|subject), 
  family = poisson(link = 'log'),
  data = df2_visit %>%
    filter(subject%in%subjects_ok) %>% 
    filter(subject%in%subjects_green)
)
```

```{r print-posteriors-poisson-visit}
#| code-summary: "Print Summary"
#| fig-width: 6
#| fig-height: 4.5

summary(fit)
```

:::

#### Compare

```{r model-comparison}

anova(m0, m1, m2, m3)

```

:::

#### Plot

```{r plot-model3}
#| label: fig-model3
#| fig-cap: Model prediction.
#| code-summary: "Plot"
#| fig-width: 4
#| fig-height: 3.5

effs<- as.data.frame( allEffects(m3) )

effs$`vrA:vrC` %>% 
  ggplot(aes(vrA, fit, color=factor(vrC))) +
  geom_line() +
  theme_pubr() +
  theme(legend.position = c(0.2, 0.7)) +
  scale_color_manual(values = RColorBrewer::brewer.pal(9, "Reds")[c(5:9)])+
  labs(color='vrC') +
  labs(color="Background\nUncertainty", x="Uncertainty Attended", y="Samples") 

```

::: 

<br><br>

::: {.panel-tabset}

#### Normalize Variables

```{r}
#| results: hide
#| code-summary: "Fit Model"

m <- glmer(
  formula = samples ~ (vrA + vrB + vrC + delta_ups + visit)*visit + vrA:vrC + (vrA*vrC | subject), 
  family = poisson(link = 'log'),
  data = df2_visit %>% 
    mutate(visit=visit-1,
           vrC = z_score(vrC),
           delta_ups = z_score(delta_ups)) %>% 
    filter(visit<=4) %>%
    group_by(subject, visit) %>%
    mutate(vrA = ( vrA-median(vrA) ) / sd(vrA),
           vrB = ( vrB-median(vrB) ) / sd(vrB)) 
  
)
summary(m)
```


```{r}
#| code-summary: "Print Summary"
summary(m)
```


#### Plot

```{r plot-centered-model}
#| label: fig-centered-model
#| fig-cap: Model prediction.
#| code-summary: "Plot"
#| fig-width: 7
#| fig-height: 3.5


effs<- as.data.frame( allEffects(m) )

rbind(
  effs$`vrA:visit` %>% mutate(option="A") %>% select(option, vr=vrA, visit, fit),
  effs$`vrB:visit` %>% mutate(option="B") %>% select(option, vr=vrB, visit, fit),
  effs$`vrC:visit` %>% mutate(option="C") %>% select(option, vr=vrC, visit, fit)
) %>% mutate(visit=as.factor(visit)) %>% 
  ggplot(aes(vr, fit, color=visit)) +
  geom_line() +
  facet_wrap(~option) +
  theme_pubr() + theme(legend.position = "right") +
  scale_color_manual(values = RColorBrewer::brewer.pal(9, "Blues")[5:9]) +
  labs(x='Uncertainty', y="Samples")


plot_grid(
  NULL, 
  effs$`vrA:vrC` %>% 
  ggplot(aes(vrA, fit, color=factor(vrC))) +
  geom_line() +
  theme_pubr() +
  theme(legend.position = c(0.2, 0.7)) +
  scale_color_manual(values = RColorBrewer::brewer.pal(9, "Reds")[c(5:9)])+
  labs(color='Background\nUncertainty', x="Attended Uncertainty", y="Samples"),
  NULL, nrow = 1, rel_widths = c(0.15, 0.7, 0.15)
  
)
```

:::


